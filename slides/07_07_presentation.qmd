---
title: "Decimal matrix and ClonalOrigin"
author: "Haochu"
format: html
editor: visual
---

```{r}
#| label: load-packages
#| include: false

library(ggplot2)
library(devtools)
library(sdprisk)
install("C:/Users/u2008181/simARG")
set.seed(10)
```

## Convert Binary Rows into Decimal

### Example Matrix

Consider a matrix to store $500 \times 500000$ binary numbers.

The binary matrix size:

```{r}
#| echo: true
int_matrix <- matrix(1L, nrow=500, ncol=5e5)
bool_matrix <- matrix(T, nrow=500, ncol=5e5)

object.size(int_matrix)
object.size(bool_matrix)

object.size(int_matrix) / (500 * 5e5)
object.size(bool_matrix) / (500 * 5e5)
```

Convert every 10 binary elements to a numerical element:

```{r}
#| echo: true
num10_matrix <- matrix(as.integer(sum(2^(0:9))), nrow=500, ncol=50000)

object.size(num10_matrix)
object.size(num10_matrix) / (500 * 5e5)
```

Convert every 20 binary elements to a numerical element:

```{r}
#| echo: true
num20_matrix <- matrix(as.integer(sum(2^(0:19))), nrow=500, ncol=25000)

object.size(num20_matrix)
object.size(num20_matrix) / (500 * 5e5)
```

Convert every 30 binary elements to a numerical element:

```{r}
#| echo: true
print(log2(.Machine$integer.max))
num30_matrix <- matrix(as.integer(sum(2^(0:29))), nrow=500, ncol=16667)

object.size(num30_matrix)
object.size(num30_matrix) / (500 * 5e5)
```

So, to store $5000000$ binary numbers at every row of a matrix in a ROM of 5GB

```{r}
#| echo: true
print(paste0("Boolean / integer: ", 5e9/(5e6 * 4), " rows"))
print(paste0("To int every 10 elements: ", 5e9/(5e6 * 0.4), " rows"))
print(paste0("To int every 20 elements: ", 5e9/(5e6 * 0.2), " rows"))
print(paste0("To int every 30 elements: ", 5e9/(5e6 * 0.1), " rows"))
```

### Apply to `FSM_ARG`

```{r}
#| echo: true
ARG <- simARG::FSM_ARG.decimal(100L, 10, 5e6L, bacteria = TRUE, delta = 10,
                               optimise_recomb = TRUE)
```

```{r}
#| echo: true
dim(ARG$node_mat)
print(paste0(object.size(ARG$node_mat)/1e9, "GB"))
```

### Other Optimisation Methods

-   Boolean matrix: only half the matrix size, we want at least $\frac{1}{5}$.

-   `bigmemory` package: slow and not work for $5 \times 10^6$.

-   Continuous intervals: haven't tried, but might not work for SimBac method.

## ClonalOrigin Local Tree

```{r}
#| echo: true
height_t_df <- data.frame(s1=rep(NA, 2000),
                          s50=rep(NA, 2000),
                          s80=rep(NA, 2000),
                          type=c(rep("ARG-based", 1000), rep("Tree-based", 1000)))

for (i in 1:1000) {
  ARG <- simARG::ClonalOrigin_ARG(100L, 5, 100L, 5, optimise_recomb=TRUE)
  Clonaltree <- simARG::ClonalOrigin(100L, 5, 100L, 5)
  tree1 <- simARG::local_tree(ARG, 1L)
  tree50 <- simARG::local_tree(ARG, 50L)
  tree80 <- simARG::local_tree(ARG, 80L)
  height_t_df$s1[i] <- tree1$sum_time
  height_t_df$s50[i] <- tree50$sum_time
  height_t_df$s80[i] <- tree80$sum_time
  height_t_df$s1[i+1000] <- simARG::local_height_ClonalOrigin(Clonaltree, 1)
  height_t_df$s50[i+1000] <- simARG::local_height_ClonalOrigin(Clonaltree, 50)
  height_t_df$s80[i+1000] <- simARG::local_height_ClonalOrigin(Clonaltree, 80)
  if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}
```

```{r}
#| echo: true
n <- 100
height_rate <- n:2 * (n-1):1 / 2
height_density <- function(x) {
  dhypoexp(x, rate=height_rate)
}

hist1 <- ggplot(height_t_df, aes(x = s1, fill = type)) +
  geom_histogram(aes(y = after_stat(density)),
                 bins = 30,
                 color = "black",
                 alpha = 0.3,
                 position = "identity") +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 1",
       x = "Height",
       y = "Density") +
  theme_minimal()
hist2 <- ggplot(height_t_df, aes(x = s50, fill = type)) +
  geom_histogram(aes(y = after_stat(density)),
                 bins = 30,
                 color = "black",
                 alpha = 0.3,
                 position = "identity") +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 50",
       x = "Height",
       y = "Density") +
  theme_minimal()
hist3 <- ggplot(height_t_df, aes(x = s80, fill = type)) +
  geom_histogram(aes(y = after_stat(density)),
                 bins = 30,
                 color = "black",
                 alpha = 0.3,
                 position = "identity") +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 80",
       x = "Height",
       y = "Density") +
  theme_minimal()
# combined_hist <- hist1 + hist2 + hist3
# combined_hist <- combined_hist +
#   plot_annotation(
#     title = "Compare two ClonalOrigin methods")
# print(combined_hist)
```
