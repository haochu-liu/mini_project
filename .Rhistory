library(patchwork)
library(sdprisk)
source("sim_gene/FSM/sim_FSM_ARG.r")
source("sim_gene/FSM/simbac_ARG.r")
source("sim_gene/FSM/sim_FSM_mutation.r")
source("sim_gene/ref/simu.R")
source("sim_gene/sim_birth_death.r")
source("sim_gene/local_tree.r")
source("sim_gene/ARG_igraph.r")
#| echo: true
time_df <- data.frame(time=rep(NA, 6000),
func=c(rep("Birth-death Process", 1000),
rep("sim_FSM_ARG(optimise_recom=T)", 1000),
rep("sim_FSM_ARG(optimise_recom=T, clonal=T))", 1000),
rep("sim_FSM_ARG(optimise_recom=F)", 1000),
rep("simbac(optimise_site=F)", 1000),
rep("simbac(optimise_site=T)", 1000)))
set.seed(10)
for (i in 1:1000) {
t <- sim_birth_death(100, 5)
time_df$time[i] <- t
r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = TRUE)
time_df$time[1000+i] <- r$sum_time
r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = TRUE, clonal = TRUE)
time_df$time[2000+i] <- r$sum_time
r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = FALSE)
time_df$time[3000+i] <- r$sum_time
r <- simbac_ARG(100, 5, 100, delta = 5, node_max = 100000, output_eff_R = FALSE)
time_df$time[4000+i] <- r$sum_time
r <- simbac_ARG(100, 5, 100, delta = 5, node_max = 100000, output_eff_R = FALSE, optimise_site = TRUE)
time_df$time[5000+i] <- r$sum_time
if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}
library(ggplot2)
library(dplyr) # For sample data creation
# 1. Create Sample Data
set.seed(123)
df <- data.frame(
Group = rep(c("A", "B", "C", "D"), each = 50),
Value = c(rnorm(50, 10, 2), rnorm(50, 12, 1.5), rnorm(50, 8, 3), rnorm(50, 15, 2.5))
)
# 2. Create a basic violin plot
p <- ggplot(df, aes(x = Group, y = Value, fill = Group)) +
geom_violin(trim = FALSE) + # trim=FALSE extends violins to min/max data points
geom_boxplot(width = 0.1, fill = "white", alpha = 0.7) + # Add boxplots inside
labs(
title = "Violin Plot (X-axis labels visible)",
x = "Group Categories", # X-axis title is still visible
y = "Measured Value"
) +
theme_minimal()
print(p)
# 3. Hide X-axis numbers/strings (tick labels)
p_hidden_x_labels <- p +
labs(title = "Violin Plot (X-axis labels hidden)") +
theme(axis.text.x = element_blank()) # This is the key line
print(p_hidden_x_labels)
# 4. Hide X-axis numbers/strings AND the X-axis title
p_hidden_x_all <- p +
labs(title = "Violin Plot (X-axis labels and title hidden)") +
theme(
axis.text.x = element_blank(),  # Hides the tick labels (numbers/strings)
axis.title.x = element_blank()  # Hides the axis title ("Group Categories")
)
print(p_hidden_x_all)
# 5. Hide X-axis numbers/strings, the X-axis title, AND the tick marks
p_hidden_x_all_and_ticks <- p +
labs(title = "Violin Plot (X-axis completely hidden)") +
theme(
axis.text.x = element_blank(),  # Hides the tick labels
axis.title.x = element_blank(), # Hides the axis title
axis.ticks.x = element_blank()  # Hides the small lines at each tick mark
)
print(p_hidden_x_all_and_ticks)
#| echo: true
ggplot(time_df, aes(x=func, y=time, fill=func)) +
geom_violin(width=1, alpha=0.5) +
geom_boxplot(width=0.1, color="black", alpha=0.2) +
labs(title = "# of leaf lineages = 100, rho = 5",
x = "Functions",
y = "ARG height") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12)
)
?time
library(ggplot2)
library(patchwork)
library(sdprisk)
source("sim_gene/FSM/sim_FSM_ARG.r")
source("sim_gene/FSM/simbac_ARG.r")
n_values <- c(20, 100, 200)
rho_values <- seq(2, 10, by = 2)
delta_values <- c(1, 10, 20)
func_vec <- c("sim_FSM_ARG(optimise=T)", "sim_FSM_ARG(optimise_recom=T, clonal=T)",
"sim_FSM_ARG(optimise=F)", "simbac_ARG(optimise_site=F)",
"simbac_ARG(optimise_site=T)")
time_df <- expand.grid(
t = NA,
n = n_values,
rho = rho_values,
delta = delta_values,
func = func_vec
)
time_result <- system.time(
sim_FSM_ARG(10, 1, 100, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = TRUE)
)
time_result
View(time_df)
n_values <- c(20, 100, 200)
rho_values <- seq(2, 10, by = 2)
delta_values <- c(1, 10, 20)
func_vec <- c("sim_FSM_ARG(optimise=T)", "sim_FSM_ARG(optimise_recom=T, clonal=T)",
"sim_FSM_ARG(optimise=F)", "simbac_ARG(optimise_site=F)",
"simbac_ARG(optimise_site=T)")
time_df <- expand.grid(
t = NA,
n = n_values,
rho = rho_values,
delta = delta_values,
func = func_vec
)
set.seed(100)
for (i in 1:nrow(time_df)) {
n <- time_df$n[i]
rho <- time_df$rho[i]
delta <- time_df$delta[i]
func_str <- time_df$func[i]
time_vec <- rep(NA, 10)
if (func_str == "sim_FSM_ARG(optimise=T)") {
for (j in 1:10) {
time_result <- system.time(
sim_FSM_ARG(n, rho, 100, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "sim_FSM_ARG(optimise_recom=T, clonal=T)") {
for (j in 1:10) {
time_result <- system.time(
sim_FSM_ARG(n, rho, 100, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE, clonal = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "sim_FSM_ARG(optimise=F)") {
for (j in 1:10) {
time_result <- system.time(
sim_FSM_ARG(n, rho, 100, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = FALSE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=F)") {
for (j in 1:10) {
time_result <- system.time(
simbac_ARG(n, rho, 100, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=T)") {
for (j in 1:10) {
time_result <- system.time(
simbac_ARG(n, rho, 100, delta, node_max = 100000, optimise_site = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
}
time_df$t[i] <- median(time_vec)
print(paste("Complete", i, "iterations"))
}
View(time_df)
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise_recom=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange"),
"simbac_ARG(optimise_site=T)"="yellow") +
facet_grid(n ~ delta) +
labs(
title = "Time by Recombination Rates",
x = "rho",
y = "time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
time_plot$func[time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"] <- "sim_FSM_ARG(optimise=T, clonal=T)"
View(time_plot)
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
time_plot$func[time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"]
time_plot$func[time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"] <- c("sim_FSM_ARG(optimise=T, clonal=T)")
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
class(time_plot)
class(time_plot$func)
time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"
change_vec <- time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"
time_plot[change_vec, 5]
time_plot[change_vec, 5] <- "sim_FSM_ARG(optimise=T, clonal=T)"
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise_recom=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange"),
"simbac_ARG(optimise_site=T)"="yellow") +
facet_grid(n ~ delta) +
labs(
title = "Time by Recombination Rates",
x = "rho",
y = "time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise_recom=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange"),
"simbac_ARG(optimise_site=T)"="yellow") +
facet_grid(n ~ delta) +
labs(
title = "Time by Recombination Rates",
x = "rho",
y = "time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise_recom=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange",
"simbac_ARG(optimise_site=T)"="yellow")) +
facet_grid(n ~ delta) +
labs(
title = "Time by Recombination Rates",
x = "rho",
y = "time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
time_plot$func[time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"] <- as.factor("sim_FSM_ARG(optimise=T, clonal=T)")
time_plot$func <- as.character(time_plot$func)
time_plot[change_vec, 5] <- "sim_FSM_ARG(optimise=T, clonal=T)"
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
time_plot$func <- as.character(time_plot$func)
time_plot[change_vec, 5] <- "sim_FSM_ARG(optimise=T, clonal=T)"
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange",
"simbac_ARG(optimise_site=T)"="yellow")) +
facet_grid(n ~ delta) +
labs(
title = "Time by Recombination Rates",
x = "rho",
y = "time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange",
"simbac_ARG(optimise_site=T)"="yellow")) +
facet_grid(n ~ delta) +
labs(
title = "Running time for different ARG simulation methods",
x = "rho",
y = "log time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
usethis::git_sitrep()
usethis::git_vaccinate()
usethis::git_sitrep()
setdiff(c(1, 2, 3, 4, 5), 4)
v1 <- rep(T, 5)
v1
all(v1[c(2, 5)])
v1[5] <- F
v1
all(v1[c(2, 5)])
pool <- c(1, 2, 4)
v1[2] <- F
v1
v1[pool]
pool[v1[pool]]
library(igraph)
source("sim_gene/FSM/sim_ClonalOrigin_ARG.r")
source("sim_gene/FSM/sim_FSM_mutation.r")
source("sim_gene/local_tree.r")
source("sim_gene/ARG_igraph.r")
set.seed(11)
ARG <- sim_ClonalOrigin_ARG(5, 1, 10, 5, optimise_recomb = FALSE)
ARG_matrix <- as.matrix(ARG$edge[, c(1, 2)])
g <- graph_from_edgelist(ARG_matrix, directed = FALSE)
g <- delete_vertices(g, V(g)[degree(g) == 0])
layout_coord <- ARG_igraph(ARG)
plot.igraph(g)
plot.igraph(g, layout=layout_coord)
ARG_mutation <- sim_FSM_mutation(ARG, 2)
ARG$node_clonal
ARG <- sim_ClonalOrigin_ARG(5, 1, 10, 5, optimise_recomb = FALSE)
ARG_matrix <- as.matrix(ARG$edge[, c(1, 2)])
g <- graph_from_edgelist(ARG_matrix, directed = FALSE)
g <- delete_vertices(g, V(g)[degree(g) == 0])
layout_coord <- ARG_igraph(ARG)
plot.igraph(g)
plot.igraph(g, layout=layout_coord)
ARG_mutation <- sim_FSM_mutation(ARG, 2)
ARG_mutation <- sim_FSM_mutation(ARG, 2)
ARG_mutation <- sim_FSM_mutation(ARG, 2)
ARG_mutation <- sim_FSM_mutation(ARG, 2)
ARG_mutation <- sim_FSM_mutation(ARG, 2)
local_tree1 <- local_tree(ARG_mutation, 2)
n = 5
rho = 1
L = 10
delta = 1
k = n
t_sum <- 0
edge_matrix <- matrix(NA, nrow=node_max, ncol=3) # root and leaf nodes, length
node_max = 1000
edge_matrix <- matrix(NA, nrow=node_max, ncol=3) # root and leaf nodes, length
colnames(edge_matrix) <- c("node1", "node2", "length")
node_height <- rep(NA, node_max)                 # node height to recent time
node_height[1:n] <- 0                            # initialize first n nodes
# Initialize variables and vector
edge_index <- 1L
node_index <- as.integer(n + 1)
pool <- as.integer(1:n)
# clonal tree by coalescent only
while (k > 1) {
# sample a new event time
event_time <- rexp(1, rate=k*(k-1+rho)/2)
t_sum <- t_sum + event_time
# coalescent event
leaf_node <- sample(pool, size=2, replace=FALSE)
# append edges
edge_matrix[c(edge_index, edge_index+1), 1] <- node_index
edge_matrix[c(edge_index, edge_index+1), 2] <- leaf_node
edge_matrix[c(edge_index, edge_index+1), 3] <- t_sum-node_height[leaf_node]
# append root node
node_height[node_index] <- t_sum
# updates for iteration
pool <- c(setdiff(pool, leaf_node), node_index)
edge_index <- edge_index + 2L
node_index <- node_index + 1L
k <- k - 1
if (max(edge_index, node_index) >= node_max - 1) {
# add empty rows or elements if more edges than expected
edge_matrix <- rbind(edge_matrix, matrix(NA, nrow=node_max, ncol=3))
node_height <- c(node_height, rep(NA, node_max))
node_max <- 2 * node_max
}
}
edge_matrix
edge_index
node_height
node_index
edge_matrix[1:(edge_index-1), 3]
edge_matrix[1:(edge_index-1), ]
n = 5
rho = 1
L = 10
delta = 1
k = n
t_sum <- 0
clonal_edge <- matrix(NA, nrow=2*(n-1), ncol=3) # root and leaf nodes, length
colnames(clonal_edge) <- c("node1", "node2", "length")
clonal_node_height <- rep(NA, 2*n-1)            # node height to recent time
clonal_node_height[1:n] <- 0                    # initialize first n nodes
# Initialize variables and vector
edge_index <- 1L
node_index <- as.integer(n + 1)
pool <- as.integer(1:n)
# clonal tree by coalescent only
while (k > 1) {
# sample a new event time
event_time <- rexp(1, rate=k*(k-1+rho)/2)
t_sum <- t_sum + event_time
# coalescent event
leaf_node <- sample(pool, size=2, replace=FALSE)
# append edges
clonal_edge[c(edge_index, edge_index+1), 1] <- node_index
clonal_edge[c(edge_index, edge_index+1), 2] <- leaf_node
clonal_edge[c(edge_index, edge_index+1), 3] <- t_sum-clonal_node_height[leaf_node]
# append root node
clonal_node_height[node_index] <- t_sum
# updates for iteration
pool <- c(setdiff(pool, leaf_node), node_index)
edge_index <- edge_index + 2L
node_index <- node_index + 1L
k <- k - 1
}
clonal_edge
node_index
clonal_node_height
Inf
?rexp()
usethis::git_sitrep()
usethis::git_sitrep()
usethis::git_vaccinate()
getwd()
usethis::create_package("C:/Users/u2008181/sim_ARG")
usethis::create_package("C:/Users/u2008181/sim_gene")
usethis::create_package("C:/Users/u2008181/simARG")
