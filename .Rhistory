x = "Height",
y = "Density") +
theme_minimal()
hist3 <- ggplot(height_t_df, aes(x = s80)) +
geom_histogram(aes(y = after_stat(density)),
bins = 30,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 80",
x = "Height",
y = "Density") +
theme_minimal()
combined_hist <- hist1 + hist2 + hist3
combined_hist <- combined_hist +
plot_annotation(
title = "simbac_ARG(100, 5, 100, delta = 5, node_max = 100000)")
print(combined_hist)
#| echo: true
height_t_df <- data.frame(s1=rep(NA, 1000),
s50=rep(NA, 1000),
s80=rep(NA, 1000))
set.seed(10)
for (i in 1:1000) {
ARG <- simbac_ARG(100, 5, 100, delta = 5, node_max = 100000, output_eff_R = TRUE, optimise_site = TRUE)
tree1 <- local_tree(ARG, 1)
tree50 <- local_tree(ARG, 50)
tree80 <- local_tree(ARG, 80)
height_t_df$s1[i] <- tree1$sum_time
height_t_df$s50[i] <- tree50$sum_time
height_t_df$s80[i] <- tree80$sum_time
if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}
#| echo: true
n <- 100
height_rate <- n:2 * (n-1):1 / 2
height_density <- function(x) {
dhypoexp(x, rate=height_rate)
}
hist1 <- ggplot(height_t_df, aes(x = s1)) +
geom_histogram(aes(y = after_stat(density)),
bins = 30,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 1",
x = "Height",
y = "Density") +
theme_minimal()
hist2 <- ggplot(height_t_df, aes(x = s50)) +
geom_histogram(aes(y = after_stat(density)),
bins = 30,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 50",
x = "Height",
y = "Density") +
theme_minimal()
hist3 <- ggplot(height_t_df, aes(x = s80)) +
geom_histogram(aes(y = after_stat(density)),
bins = 30,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 80",
x = "Height",
y = "Density") +
theme_minimal()
combined_hist <- hist1 + hist2 + hist3
combined_hist <- combined_hist +
plot_annotation(
title = "simbac_ARG(100, 5, 100, delta = 5, node_max = 100000)")
print(combined_hist)
#| label: load-packages
#| include: false
library(ggplot2)
library(microbenchmark)
library(patchwork)
library(sdprisk)
source("sim_gene/FSM/sim_FSM_ARG.r")
source("sim_gene/FSM/simbac_ARG.r")
source("sim_gene/FSM/sim_FSM_mutation.r")
source("sim_gene/ref/simu.R")
source("sim_gene/sim_birth_death.r")
source("sim_gene/local_tree.r")
source("sim_gene/ARG_igraph.r")
#| echo: true
time_df <- data.frame(time=rep(NA, 6000),
func=c(rep("Birth-death Process", 1000),
rep("sim_FSM_ARG(optimise_recom=T)", 1000),
rep("sim_FSM_ARG(optimise_recom=T, clonal=T))", 1000),
rep("sim_FSM_ARG(optimise_recom=F)", 1000),
rep("simbac(optimise_site=F)", 1000),
rep("simbac(optimise_site=T)", 1000)))
set.seed(10)
for (i in 1:1000) {
t <- sim_birth_death(100, 5)
time_df$time[i] <- t
r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = TRUE)
time_df$time[1000+i] <- r$sum_time
r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = TRUE, clonal = TRUE)
time_df$time[2000+i] <- r$sum_time
r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = FALSE)
time_df$time[3000+i] <- r$sum_time
r <- simbac_ARG(100, 5, 100, delta = 5, node_max = 100000, output_eff_R = FALSE)
time_df$time[4000+i] <- r$sum_time
r <- simbac_ARG(100, 5, 100, delta = 5, node_max = 100000, output_eff_R = FALSE, optimise_site = TRUE)
time_df$time[5000+i] <- r$sum_time
if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}
any(NULL)
#| label: load-packages
#| include: false
library(ggplot2)
library(microbenchmark)
library(patchwork)
library(sdprisk)
source("sim_gene/FSM/sim_FSM_ARG.r")
source("sim_gene/FSM/simbac_ARG.r")
source("sim_gene/FSM/sim_FSM_mutation.r")
source("sim_gene/ref/simu.R")
source("sim_gene/sim_birth_death.r")
source("sim_gene/local_tree.r")
source("sim_gene/ARG_igraph.r")
#| echo: true
time_df <- data.frame(time=rep(NA, 6000),
func=c(rep("Birth-death Process", 1000),
rep("sim_FSM_ARG(optimise_recom=T)", 1000),
rep("sim_FSM_ARG(optimise_recom=T, clonal=T))", 1000),
rep("sim_FSM_ARG(optimise_recom=F)", 1000),
rep("simbac(optimise_site=F)", 1000),
rep("simbac(optimise_site=T)", 1000)))
set.seed(10)
for (i in 1:1000) {
t <- sim_birth_death(100, 5)
time_df$time[i] <- t
r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = TRUE)
time_df$time[1000+i] <- r$sum_time
r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = TRUE, clonal = TRUE)
time_df$time[2000+i] <- r$sum_time
r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = FALSE)
time_df$time[3000+i] <- r$sum_time
r <- simbac_ARG(100, 5, 100, delta = 5, node_max = 100000, output_eff_R = FALSE)
time_df$time[4000+i] <- r$sum_time
r <- simbac_ARG(100, 5, 100, delta = 5, node_max = 100000, output_eff_R = FALSE, optimise_site = TRUE)
time_df$time[5000+i] <- r$sum_time
if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}
library(ggplot2)
library(dplyr) # For sample data creation
# 1. Create Sample Data
set.seed(123)
df <- data.frame(
Group = rep(c("A", "B", "C", "D"), each = 50),
Value = c(rnorm(50, 10, 2), rnorm(50, 12, 1.5), rnorm(50, 8, 3), rnorm(50, 15, 2.5))
)
# 2. Create a basic violin plot
p <- ggplot(df, aes(x = Group, y = Value, fill = Group)) +
geom_violin(trim = FALSE) + # trim=FALSE extends violins to min/max data points
geom_boxplot(width = 0.1, fill = "white", alpha = 0.7) + # Add boxplots inside
labs(
title = "Violin Plot (X-axis labels visible)",
x = "Group Categories", # X-axis title is still visible
y = "Measured Value"
) +
theme_minimal()
print(p)
# 3. Hide X-axis numbers/strings (tick labels)
p_hidden_x_labels <- p +
labs(title = "Violin Plot (X-axis labels hidden)") +
theme(axis.text.x = element_blank()) # This is the key line
print(p_hidden_x_labels)
# 4. Hide X-axis numbers/strings AND the X-axis title
p_hidden_x_all <- p +
labs(title = "Violin Plot (X-axis labels and title hidden)") +
theme(
axis.text.x = element_blank(),  # Hides the tick labels (numbers/strings)
axis.title.x = element_blank()  # Hides the axis title ("Group Categories")
)
print(p_hidden_x_all)
# 5. Hide X-axis numbers/strings, the X-axis title, AND the tick marks
p_hidden_x_all_and_ticks <- p +
labs(title = "Violin Plot (X-axis completely hidden)") +
theme(
axis.text.x = element_blank(),  # Hides the tick labels
axis.title.x = element_blank(), # Hides the axis title
axis.ticks.x = element_blank()  # Hides the small lines at each tick mark
)
print(p_hidden_x_all_and_ticks)
#| echo: true
ggplot(time_df, aes(x=func, y=time, fill=func)) +
geom_violin(width=1, alpha=0.5) +
geom_boxplot(width=0.1, color="black", alpha=0.2) +
labs(title = "# of leaf lineages = 100, rho = 5",
x = "Functions",
y = "ARG height") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12)
)
?time
library(ggplot2)
library(patchwork)
library(sdprisk)
source("sim_gene/FSM/sim_FSM_ARG.r")
source("sim_gene/FSM/simbac_ARG.r")
n_values <- c(20, 100, 200)
rho_values <- seq(2, 10, by = 2)
delta_values <- c(1, 10, 20)
func_vec <- c("sim_FSM_ARG(optimise=T)", "sim_FSM_ARG(optimise_recom=T, clonal=T)",
"sim_FSM_ARG(optimise=F)", "simbac_ARG(optimise_site=F)",
"simbac_ARG(optimise_site=T)")
time_df <- expand.grid(
t = NA,
n = n_values,
rho = rho_values,
delta = delta_values,
func = func_vec
)
time_result <- system.time(
sim_FSM_ARG(10, 1, 100, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = TRUE)
)
time_result
View(time_df)
n_values <- c(20, 100, 200)
rho_values <- seq(2, 10, by = 2)
delta_values <- c(1, 10, 20)
func_vec <- c("sim_FSM_ARG(optimise=T)", "sim_FSM_ARG(optimise_recom=T, clonal=T)",
"sim_FSM_ARG(optimise=F)", "simbac_ARG(optimise_site=F)",
"simbac_ARG(optimise_site=T)")
time_df <- expand.grid(
t = NA,
n = n_values,
rho = rho_values,
delta = delta_values,
func = func_vec
)
set.seed(100)
for (i in 1:nrow(time_df)) {
n <- time_df$n[i]
rho <- time_df$rho[i]
delta <- time_df$delta[i]
func_str <- time_df$func[i]
time_vec <- rep(NA, 10)
if (func_str == "sim_FSM_ARG(optimise=T)") {
for (j in 1:10) {
time_result <- system.time(
sim_FSM_ARG(n, rho, 100, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "sim_FSM_ARG(optimise_recom=T, clonal=T)") {
for (j in 1:10) {
time_result <- system.time(
sim_FSM_ARG(n, rho, 100, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE, clonal = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "sim_FSM_ARG(optimise=F)") {
for (j in 1:10) {
time_result <- system.time(
sim_FSM_ARG(n, rho, 100, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = FALSE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=F)") {
for (j in 1:10) {
time_result <- system.time(
simbac_ARG(n, rho, 100, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=T)") {
for (j in 1:10) {
time_result <- system.time(
simbac_ARG(n, rho, 100, delta, node_max = 100000, optimise_site = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
}
time_df$t[i] <- median(time_vec)
print(paste("Complete", i, "iterations"))
}
View(time_df)
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise_recom=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange"),
"simbac_ARG(optimise_site=T)"="yellow") +
facet_grid(n ~ delta) +
labs(
title = "Time by Recombination Rates",
x = "rho",
y = "time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
time_plot$func[time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"] <- "sim_FSM_ARG(optimise=T, clonal=T)"
View(time_plot)
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
time_plot$func[time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"]
time_plot$func[time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"] <- c("sim_FSM_ARG(optimise=T, clonal=T)")
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
class(time_plot)
class(time_plot$func)
time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"
change_vec <- time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"
time_plot[change_vec, 5]
time_plot[change_vec, 5] <- "sim_FSM_ARG(optimise=T, clonal=T)"
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise_recom=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange"),
"simbac_ARG(optimise_site=T)"="yellow") +
facet_grid(n ~ delta) +
labs(
title = "Time by Recombination Rates",
x = "rho",
y = "time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise_recom=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange"),
"simbac_ARG(optimise_site=T)"="yellow") +
facet_grid(n ~ delta) +
labs(
title = "Time by Recombination Rates",
x = "rho",
y = "time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise_recom=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange",
"simbac_ARG(optimise_site=T)"="yellow")) +
facet_grid(n ~ delta) +
labs(
title = "Time by Recombination Rates",
x = "rho",
y = "time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
time_plot$func[time_plot$func == "sim_FSM_ARG(optimise_recom=T, clonal=T)"] <- as.factor("sim_FSM_ARG(optimise=T, clonal=T)")
time_plot$func <- as.character(time_plot$func)
time_plot[change_vec, 5] <- "sim_FSM_ARG(optimise=T, clonal=T)"
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
time_plot$func <- as.character(time_plot$func)
time_plot[change_vec, 5] <- "sim_FSM_ARG(optimise=T, clonal=T)"
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange",
"simbac_ARG(optimise_site=T)"="yellow")) +
facet_grid(n ~ delta) +
labs(
title = "Time by Recombination Rates",
x = "rho",
y = "time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("sim_FSM_ARG(optimise=T)"="darkblue",
"sim_FSM_ARG(optimise=T, clonal=T)"="darkgreen",
"sim_FSM_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange",
"simbac_ARG(optimise_site=T)"="yellow")) +
facet_grid(n ~ delta) +
labs(
title = "Running time for different ARG simulation methods",
x = "rho",
y = "log time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
