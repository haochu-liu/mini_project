abline(v = mu, col = "red", lwd = 2, lty = 2)
abc_pmc <- function(obs, tol, kernel_func, p_theta, d_theta, p_s, n_iter, sigma=NULL) {
#' input: obs, sigma, tol(vec in descendant order), kernel,
#' prior p_theta(), log-density d_theta(theta), model p_s(theta), n_iter
#' output: matrix (n_iter x length(theta)), matrix (n_iter x length(s))
if (is.null(sigma)) {sigma=diag(rep(1, length(obs)))}
theta_matrix <- matrix(NA, nrow=n_iter, ncol=length(p_theta()))
s_matrix <- matrix(NA, nrow=n_iter, ncol=length(obs))
T_tol <- length(tol)
# t = 1
for (i in 1:n_iter) {
while (TRUE) {
theta_0 <- p_theta()
s_0 <- p_s(theta_0)
k_0 <- kernel_func(obs, s_0, 1, sigma)
if (k_0<log(tol[1])) {break}
}
theta_matrix[i, ] <- theta_0
s_matrix[i, ] <- s_0
}
w <- rep(log(1/n_iter), n_iter)
tau <- 2*var(theta_matrix)
print(tau)
for (t in 2:T_tol) {
theta_1_matrix <- matrix(NA, nrow=n_iter, ncol=length(p_theta()))
w_1 <- rep(NA, n_iter)
for (i in 1:n_iter) {
theta_index <- sample(1:n_iter, 1, prob=exp(w))
while (TRUE) {
theta_0 <- rmvnorm(n=1, mean=theta_matrix[theta_index, ], sigma=tau)
s_0 <- p_s(theta_0)
k_0 <- kernel_func(obs, s_0, 1, sigma)
if (k_0<log(tol[t])) {break}
}
w_1[i] <- d_theta(theta_0) -
logSumExp(w+dmvnorm((as.numeric(theta_0)-theta_matrix), sigma=tau,
log=TRUE)+c(log(sqrt(tau))))
theta_1_matrix[i, ] <- theta_0
s_matrix[i, ] <- s_0
}
w <- w_1
theta_matrix <- theta_1_matrix
tau <- 2*var(theta_matrix)
print(tau)
}
return(list(theta_matrix=theta_matrix, s_matrix=s_matrix))
}
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE, main = "pi(mu|s_obs)",
breaks = 20, col = "gray", border = "black")
abline(v = mu, col = "red", lwd = 2, lty = 2)
tol <- c(10, 2)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE, main = "pi(mu|s_obs)",
breaks = 20, col = "gray", border = "black")
abline(v = mu, col = "red", lwd = 2, lty = 2)
abc_pmc <- function(obs, tol, kernel_func, p_theta, d_theta, p_s, n_iter, sigma=NULL) {
#' input: obs, sigma, tol(vec in descendant order), kernel,
#' prior p_theta(), log-density d_theta(theta), model p_s(theta), n_iter
#' output: matrix (n_iter x length(theta)), matrix (n_iter x length(s))
if (is.null(sigma)) {sigma=diag(rep(1, length(obs)))}
theta_matrix <- matrix(NA, nrow=n_iter, ncol=length(p_theta()))
s_matrix <- matrix(NA, nrow=n_iter, ncol=length(obs))
T_tol <- length(tol)
# t = 1
for (i in 1:n_iter) {
while (TRUE) {
theta_0 <- p_theta()
s_0 <- p_s(theta_0)
k_0 <- kernel_func(obs, s_0, 1, sigma)
if (k_0<log(tol[1])) {break}
}
theta_matrix[i, ] <- theta_0
s_matrix[i, ] <- s_0
}
w <- rep(log(1/n_iter), n_iter)
tau <- 2*var(theta_matrix)
print(tau)
for (t in 2:T_tol) {
theta_1_matrix <- matrix(NA, nrow=n_iter, ncol=length(p_theta()))
w_1 <- rep(NA, n_iter)
for (i in 1:n_iter) {
theta_index <- sample(1:n_iter, 1, prob=exp(w))
while (TRUE) {
theta_0 <- rmvnorm(n=1, mean=theta_matrix[theta_index, ], sigma=tau)
s_0 <- p_s(theta_0)
k_0 <- kernel_func(obs, s_0, 1, sigma)
if (k_0<log(tol[t])) {break}
}
w_1[i] <- d_theta(theta_0) -
logSumExp(w+dmvnorm((as.numeric(theta_0)-theta_matrix), sigma=tau,
log=TRUE)+c(log(sqrt(tau))))
theta_1_matrix[i, ] <- theta_0
s_matrix[i, ] <- s_0
}
w <- w_1
theta_matrix <- theta_1_matrix
tau <- 2*var(theta_matrix)
print(tau)
}
return(list(theta_matrix=theta_matrix, s_matrix=s_matrix))
}
tol <- c(10, 2)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE, main = "pi(mu|s_obs)",
breaks = 20, col = "gray", border = "black")
abline(v = mu, col = "red", lwd = 2, lty = 2)
abc_pmc <- function(obs, tol, kernel_func, p_theta, d_theta, p_s, n_iter, sigma=NULL) {
#' input: obs, sigma, tol(vec in descendant order), kernel,
#' prior p_theta(), log-density d_theta(theta), model p_s(theta), n_iter
#' output: matrix (n_iter x length(theta)), matrix (n_iter x length(s))
if (is.null(sigma)) {sigma=diag(rep(1, length(obs)))}
theta_matrix <- matrix(NA, nrow=n_iter, ncol=length(p_theta()))
s_matrix <- matrix(NA, nrow=n_iter, ncol=length(obs))
T_tol <- length(tol)
# t = 1
for (i in 1:n_iter) {
while (TRUE) {
theta_0 <- p_theta()
s_0 <- p_s(theta_0)
k_0 <- kernel_func(obs, s_0, 1, sigma)
if (k_0<log(tol[1])) {break}
}
theta_matrix[i, ] <- theta_0
s_matrix[i, ] <- s_0
}
w <- rep(log(1/n_iter), n_iter)
tau <- 2*var(theta_matrix)
print(tau)
for (t in 2:T_tol) {
theta_1_matrix <- matrix(NA, nrow=n_iter, ncol=length(p_theta()))
w_1 <- rep(NA, n_iter)
for (i in 1:n_iter) {
theta_index <- sample(1:n_iter, 1, prob=exp(w))
while (TRUE) {
theta_0 <- rmvnorm(n=1, mean=theta_matrix[theta_index, ], sigma=tau)
s_0 <- p_s(theta_0)
k_0 <- kernel_func(obs, s_0, 1, sigma)
if (k_0<log(tol[t])) {break}
}
w_1[i] <- d_theta(theta_0) -
logSumExp(w+dmvnorm((as.numeric(theta_0)-theta_matrix), sigma=tau,
log=TRUE)+c(log(sqrt(tau))))
theta_1_matrix[i, ] <- theta_0
s_matrix[i, ] <- s_0
}
w <- w_1 - logSumExp(w_1)
theta_matrix <- theta_1_matrix
tau <- 2*var(theta_matrix)
print(tau)
}
return(list(theta_matrix=theta_matrix, s_matrix=s_matrix))
}
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE, main = "pi(mu|s_obs)",
breaks = 20, col = "gray", border = "black")
abline(v = mu, col = "red", lwd = 2, lty = 2)
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5, 0.1, 0.025)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE, main = "pi(mu|s_obs)",
breaks = 20, col = "gray", border = "black")
abline(v = mu, col = "red", lwd = 2, lty = 2)
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5, 0.1)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE, main = "pi(mu|s_obs)",
breaks = 20, col = "gray", border = "black")
abline(v = mu, col = "red", lwd = 2, lty = 2)
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE, main = "pi(mu|s_obs)",
breaks = 20, col = "gray", border = "black")
abline(v = mu, col = "red", lwd = 2, lty = 2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
source("abc_functions/abc_rejection.r")
getwd
getwd()
source("abc_rejection.r")
source("../abc_functions/abc_rejection.r")
library(ggplot2)
getwd()
source("abc_functions/abc_rejection.r")
?getwd
library(ggplot2)
source("abc_rejection.r")
library(ggplot2)
setwd("C:/Users/u2008181/mini_project")
source("abc_functions/abc_rejection.r")
source("abc_functions/abc_knn.r")
source("abc_functions/abc_mcmc.r")
source("abc_functions/abc_pmc.r")
source("abc_functions/abc_llr.r")
mu <- 0
# observation
s_obs <- mean(rnorm(10, mean=mu, sd=1))
# simulations
mu_vec <- runif(100, min=-2, max=2)
s_vec <- c()
for (i in 1:length(mu_vec)) {
s_i <- mean(rnorm(10, mean=mu_vec[i]), sd=1)
s_vec <- c(s_vec, s_i)
}
weights1 <- abc_rejection(c(s_obs), matrix(mu_vec), matrix(s_vec),
tol=0.1, kernel = uniform_kernel)
weights2 <- abc_rejection(c(s_obs), matrix(mu_vec), matrix(s_vec),
tol=0.1, kernel = epanechnikov_kernel)
weights3 <- abc_rejection(c(s_obs), matrix(mu_vec), matrix(s_vec),
tol=0.1, kernel = gaussian_kernel)
abc_df <- data.frame(
x = rep(mu_vec, 3),
y = c(weights1, weights2, weights3),
type = rep(c("uniform kernel", "epanechnikov kernel", "Gaussian kernel"),
each = length(mu_vec))
)
ggplot(abc_df, aes(x = x, y = y, color = type)) +
geom_point(data=abc_df, size=3, alpha=0.5) +
scale_color_manual(values=c("red", "blue", "green")) +
labs(x="mu", y="pi(mu|s_obs)") +
geom_vline(xintercept = s_obs, color = "black", linetype = "dashed", size = 1) +
annotate("text", x = 0, y = max(weights3), label = "s_obs", color = "black", hjust = 0) +
theme_minimal()
weights1 <- abc_rejection(c(s_obs), matrix(mu_vec), matrix(s_vec),
tol=0.1, kernel = uniform_kernel)
weights2 <- abc_rejection(c(s_obs), matrix(mu_vec), matrix(s_vec),
tol=0.1, kernel = epanechnikov_kernel)
weights3 <- abc_rejection(c(s_obs), matrix(mu_vec), matrix(s_vec),
tol=0.1, kernel = gaussian_kernel)
abc_df <- data.frame(
x = rep(mu_vec, 3),
y = c(weights1, weights2, weights3),
type = rep(c("uniform kernel", "epanechnikov kernel", "Gaussian kernel"),
each = length(mu_vec))
)
ggplot(abc_df, aes(x = x, y = y, color = type)) +
geom_point(data=abc_df, size=3, alpha=0.5) +
scale_color_manual(values=c("red", "blue", "green")) +
labs(x="mu", y="pi(mu|s_obs)") +
geom_vline(xintercept = s_obs, color = "black", linetype = "dashed", size = 1) +
annotate("text", x = 0, y = max(abc_df$y)+0.1, label = "s_obs", color = "black", hjust = 0) +
theme_minimal()
w_k <- abc_knn(c(s_obs), matrix(mu_vec), matrix(s_vec),
k=10, kernel = uniform_kernel)
sum(w_k!=0)
obs <- c(s_obs)
param <- matrix(mu_vec)
sumstat <- matrix(s_vec)
weights <- weights3
param_hat <- param
sumstat_d <- sumstat - obs
sumstat_d
i <- 1
loc_model <- lm(param[, i] ~ sumstat_d, weights=weights)
coef(model)
coef(loc_model)
coef(loc_model)[2:]
coef(loc_model)[2:length(coef(loc_model))]
length(coef(loc_model))
beta_hat <- matrix(coef(loc_model)[2:length(coef(loc_model))], ncol=1)
beta_hat
abc_llr <- function(obs, param, sumstat, weights) {
#' input: obs(vector), param(matrix: n x length(theta)),
#' sumstat(matrix: n x length(s)), weights(vector)
#' output: adjusted param(matrix: n x length(theta))
param_hat <- param
sumstat_d <- sumstat - obs
for (i in 1:ncol(param)) {
loc_model <- lm(param[, i] ~ sumstat_d, weights=weights)
beta_hat <- matrix(coef(loc_model)[2:length(coef(loc_model))], ncol=1)
param_hat[, i] <- param[, i] - sumstat_d %*% beta_hat
}
return(param_hat)
}
corrected_mu <- abc_llr(c(s_obs), matrix(mu_vec), matrix(s_vec), weights3)
abc_df <- data.frame(
x = c(mu_vec, corrected_mu),
y = rep(weights3, 2),
type = rep(c("abc-rejection", "abc local linear regression"),
each = length(mu_vec))
)
ggplot(abc_df, aes(x = x, y = y, color = type)) +
geom_point(data=abc_df, size=3, alpha=0.5) +
scale_color_manual(values=c("red", "blue")) +
labs(x="mu", y="pi(mu|s_obs)") +
theme_minimal()
corrected_mu <- abc_llr(c(s_obs), matrix(mu_vec), matrix(s_vec), weights3)
abc_df <- data.frame(
x = c(mu_vec, corrected_mu),
y = rep(weights3, 2),
type = rep(c("abc-rejection", "abc local linear regression"),
each = length(mu_vec))
)
ggplot(abc_df, aes(x = x, y = y, color = type)) +
geom_point(data=abc_df, size=3, alpha=0.5) +
scale_color_manual(values=c("red", "blue")) +
labs(x="mu", y="pi(mu|s_obs)") +
geom_vline(xintercept = s_obs, color = "black", linetype = "dashed", size = 1) +
annotate("text", x = 0, y = max(abc_df$y)+0.1, label = "s_obs", color = "black", hjust = 0) +
theme_minimal()
# abc-mcmc
mu <- 0
# observation
s_obs <- mean(rnorm(10, mean=mu, sd=1))
# s_obs <- 0
# proposal function
p_theta <- function(theta_0) {
runif(1, min=-2, max=2)
}
d_theta <- function(theta_1, theta_0) {
log(1/4)
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# initial theta
mu_0 <- runif(1, min=-2, max=2)
# M-H
matrix_list <- abc_mcmc(c(s_obs), 0.01, gaussian_kernel, p_theta, d_theta, p_s, d_theta, mu_0, 10000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE, main = "pi(mu|s_obs)",
breaks = 20, col = "gray", border = "black")
abline(v = mu, col = "red", lwd = 2, lty = 2)
dim(matrix_list)
dim(matrix_list$theta_matrix)
# hist of posterior
hist(matrix_list$theta_matrix[5000:10001, ], probability = TRUE, main = "pi(mu|s_obs)",
breaks = 20, col = "gray", border = "black")
abline(v = mu, col = "red", lwd = 2, lty = 2)
# proposal function
p_theta <- function(theta_0) {
runif(1, min=-2, max=2)
}
d_theta <- function(theta_1, theta_0) {
if (theta < 2 & theta > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# initial theta
mu_0 <- runif(1, min=-2, max=2)
# M-H
matrix_list <- abc_mcmc(c(s_obs), 0.01, gaussian_kernel, p_theta, d_theta, p_s, d_theta, mu_0, 10000)
# proposal function
p_theta <- function(theta_0) {
runif(1, min=-2, max=2)
}
d_theta <- function(theta_1, theta_0) {
if (theta_1 < 2 & theta_1 > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# initial theta
mu_0 <- runif(1, min=-2, max=2)
# M-H
matrix_list <- abc_mcmc(c(s_obs), 0.01, gaussian_kernel, p_theta, d_theta, p_s, d_theta, mu_0, 10000)
# hist of posterior
hist(matrix_list$theta_matrix[5000:10001, ], probability = TRUE, main = "pi(mu|s_obs)",
breaks = 20, col = "gray", border = "black", xlab="mu")
abline(v = mu, col = "red", lwd = 2, lty = 2)
# proposal function
p_theta <- function(theta_0) {
runif(1, min=-2, max=2)
}
d_theta <- function(theta_1, theta_0) {
if (theta_1 < 2 & theta_1 > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# initial theta
mu_0 <- runif(1, min=-2, max=2)
# M-H
matrix_list <- abc_mcmc(c(s_obs), 0.01, gaussian_kernel, p_theta, d_theta, p_s, d_theta, mu_0, 10000)
# hist of posterior
hist(matrix_list$theta_matrix[5000:10001, ], probability = TRUE, main = "pi(mu|s_obs)",
breaks = 20, col = "gray", border = "black", xlab="mu")
abline(v = s_obs, col = "red", lwd = 2, lty = 2)
# proposal function
p_theta <- function() {
runif(1, min=-2, max=2)
}
d_theta <- function(theta) {
if (theta < 2 & theta > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE,
breaks = 20, col = "gray", border = "black", xlab="mu")
abline(v = s_obs, col = "red", lwd = 2, lty = 2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
setwd("C:/Users/u2008181/mini_project")
source("abc_functions/abc_rejection.r")
source("abc_functions/abc_knn.r")
source("abc_functions/abc_mcmc.r")
source("abc_functions/abc_pmc.r")
source("abc_functions/abc_llr.r")
mu <- 0
# observation
s_obs <- mean(rnorm(10, mean=mu, sd=1))
# simulations
mu_vec <- runif(100, min=-2, max=2)
s_vec <- c()
for (i in 1:length(mu_vec)) {
s_i <- mean(rnorm(10, mean=mu_vec[i]), sd=1)
s_vec <- c(s_vec, s_i)
}
weights1 <- abc_rejection(c(s_obs), matrix(mu_vec), matrix(s_vec),
tol=0.1, kernel = uniform_kernel)
weights2 <- abc_rejection(c(s_obs), matrix(mu_vec), matrix(s_vec),
tol=0.1, kernel = epanechnikov_kernel)
weights3 <- abc_rejection(c(s_obs), matrix(mu_vec), matrix(s_vec),
tol=0.1, kernel = gaussian_kernel)
abc_df <- data.frame(
x = rep(mu_vec, 3),
y = c(weights1, weights2, weights3),
type = rep(c("uniform kernel", "epanechnikov kernel", "Gaussian kernel"),
each = length(mu_vec))
)
ggplot(abc_df, aes(x = x, y = y, color = type)) +
geom_point(data=abc_df, size=3, alpha=0.5) +
scale_color_manual(values=c("red", "blue", "green")) +
labs(x="mu", y="pi(mu|s_obs)") +
geom_vline(xintercept = s_obs, color = "black", linetype = "dashed", size = 1) +
annotate("text", x = 0, y = max(abc_df$y)+0.1, label = "s_obs", color = "black", hjust = 0) +
theme_minimal()
w_k <- abc_knn(c(s_obs), matrix(mu_vec), matrix(s_vec),
k=10, kernel = uniform_kernel)
sum(w_k!=0)
corrected_mu <- abc_llr(c(s_obs), matrix(mu_vec), matrix(s_vec), weights3)
abc_df <- data.frame(
x = c(mu_vec, corrected_mu),
y = rep(weights3, 2),
type = rep(c("abc-rejection", "abc local linear regression"),
each = length(mu_vec))
)
ggplot(abc_df, aes(x = x, y = y, color = type)) +
geom_point(data=abc_df, size=3, alpha=0.5) +
scale_color_manual(values=c("red", "blue")) +
labs(x="mu", y="pi(mu|s_obs)") +
geom_vline(xintercept = s_obs, color = "black", linetype = "dashed", size = 1) +
annotate("text", x = 0, y = max(abc_df$y)+0.1, label = "s_obs", color = "black", hjust = 0) +
theme_minimal()
# proposal function
p_theta <- function(theta_0) {
runif(1, min=-2, max=2)
}
d_theta <- function(theta_1, theta_0) {
if (theta_1 < 2 & theta_1 > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# initial theta
mu_0 <- runif(1, min=-2, max=2)
# M-H
matrix_list <- abc_mcmc(c(s_obs), 0.01, gaussian_kernel, p_theta, d_theta, p_s, d_theta, mu_0, 10000)
# hist of posterior
hist(matrix_list$theta_matrix[5000:10001, ], probability = TRUE, main = "Histogram of mu|s_obs",
breaks = 20, col = "gray", border = "black", xlab="mu")
abline(v = s_obs, col = "red", lwd = 2, lty = 2)
# proposal function
p_theta <- function() {
runif(1, min=-2, max=2)
}
d_theta <- function(theta) {
if (theta < 2 & theta > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE, main = "Histogram of mu|s_obs",
breaks = 20, col = "gray", border = "black", xlab="mu")
abline(v = s_obs, col = "red", lwd = 2, lty = 2)
source("C:/Users/u2008181/mini_project/abc_functions/abc_pmc.r")
debugSource("C:/Users/u2008181/mini_project/abc_functions/abc_pmc.r")
source("C:/Users/u2008181/mini_project/abc_functions/abc_pmc.r")
n
