time_result <- system.time(
simARG::FSM_ARG(n, rho, 100L, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "sim_FSM_ARG(optimise=T, clonal=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::FSM_ARG(n, rho, 100L, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE, clonal = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=F)") {
for (j in 1:10) {
time_result <- system.time(
simARG::simbac_ARG(n, rho, 100L, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::simbac_ARG(n, rho, 100L, delta, node_max = 100000, optimise_site = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "ClonalOrigin_ARG(optimise=F)") {
for (j in 1:10) {
time_result <- system.time(
simARG::ClonalOrigin_ARG(n, rho, 100L, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
}
time_df$t[i] <- median(time_vec)
print(paste("Complete", i, "iterations"))
}
simARG::FSM_ARG(20L, 5, 100L, bacteria = TRUE, delta = 1,
node_max = 100000, optimise_recomb = TRUE)
system.time(
simARG::FSM_ARG(20L, rho, 100L, bacteria = TRUE, delta = 1,
node_max = 100000, optimise_recomb = TRUE)
)
#| echo: true
rho_values <-  seq(5, 100, by = 5)
func_vec <- c("FSM_ARG(optimise=T)", "FSM_ARG(optimise=T, clonal=T)",
"simbac_ARG(optimise_site=F)", "simbac_ARG(optimise_site=T)",
"ClonalOrigin_ARG(optimise=F)")
time_df <- expand.grid(
t = NA,
rho = rho_values,
func = func_vec
)
View(time_df)
#| echo: true
rho_values <-  seq(5, 100, by = 5)
func_vec <- c("FSM_ARG(optimise=T)", "FSM_ARG(optimise=T, clonal=T)",
"simbac_ARG(optimise_site=F)", "simbac_ARG(optimise_site=T)",
"ClonalOrigin_ARG(optimise=F)")
time_df <- expand.grid(
t = NA,
rho = rho_values,
func = func_vec
)
set.seed(100)
for (i in 1:nrow(time_df)) {
n <- 20L
rho <- time_df$rho[i]
delta <- 10
func_str <- time_df$func[i]
time_vec <- rep(NA, 10)
if (func_str == "sim_FSM_ARG(optimise=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::FSM_ARG(n, rho, 100L, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "sim_FSM_ARG(optimise=T, clonal=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::FSM_ARG(n, rho, 100L, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE, clonal = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=F)") {
for (j in 1:10) {
time_result <- system.time(
simARG::simbac_ARG(n, rho, 100L, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::simbac_ARG(n, rho, 100L, delta, node_max = 100000, optimise_site = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "ClonalOrigin_ARG(optimise=F)") {
for (j in 1:10) {
time_result <- system.time(
simARG::ClonalOrigin_ARG(n, rho, 100L, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
}
time_df$t[i] <- median(time_vec)
print(paste("Complete", i, "iterations"))
}
seq(5, 100, by = 5)
seq(5, 50, by = 5)
#| echo: true
rho_values <-  seq(5, 50, by = 5)
func_vec <- c("FSM_ARG(optimise=T)", "FSM_ARG(optimise=T, clonal=T)",
"simbac_ARG(optimise_site=F)", "simbac_ARG(optimise_site=T)",
"ClonalOrigin_ARG(optimise=F)")
time_df <- expand.grid(
t = NA,
rho = rho_values,
func = func_vec
)
set.seed(100)
for (i in 1:nrow(time_df)) {
n <- 20L
rho <- time_df$rho[i]
delta <- 10
func_str <- time_df$func[i]
time_vec <- rep(NA, 10)
if (func_str == "FSM_ARG(optimise=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::FSM_ARG(n, rho, 100L, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "FSM_ARG(optimise=T, clonal=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::FSM_ARG(n, rho, 100L, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE, clonal = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=F)") {
for (j in 1:10) {
time_result <- system.time(
simARG::simbac_ARG(n, rho, 100L, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::simbac_ARG(n, rho, 100L, delta, node_max = 100000, optimise_site = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "ClonalOrigin_ARG(optimise=F)") {
for (j in 1:10) {
time_result <- system.time(
simARG::ClonalOrigin_ARG(n, rho, 100L, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
}
time_df$t[i] <- median(time_vec)
print(paste("Complete", i, "iterations"))
}
#| echo: true
rho_values <-  seq(5, 30, by = 5)
func_vec <- c("FSM_ARG(optimise=T)", "FSM_ARG(optimise=T, clonal=T)",
"simbac_ARG(optimise_site=F)", "simbac_ARG(optimise_site=T)",
"ClonalOrigin_ARG(optimise=F)")
time_df <- expand.grid(
t = NA,
rho = rho_values,
func = func_vec
)
set.seed(100)
for (i in 1:nrow(time_df)) {
n <- 20L
rho <- time_df$rho[i]
delta <- 10
func_str <- time_df$func[i]
time_vec <- rep(NA, 10)
if (func_str == "FSM_ARG(optimise=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::FSM_ARG(n, rho, 100L, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "FSM_ARG(optimise=T, clonal=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::FSM_ARG(n, rho, 100L, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE, clonal = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=F)") {
for (j in 1:10) {
time_result <- system.time(
simARG::simbac_ARG(n, rho, 100L, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::simbac_ARG(n, rho, 100L, delta, node_max = 100000, optimise_site = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "ClonalOrigin_ARG(optimise=F)") {
for (j in 1:10) {
time_result <- system.time(
simARG::ClonalOrigin_ARG(n, rho, 100L, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
}
time_df$t[i] <- median(time_vec)
print(paste("Complete", i, "iterations"))
}
#| echo: true
time_plot <- time_df
time_plot$n <- paste0("n = ", time_plot$n)
time_plot$delta <- paste0("delta = ", time_plot$delta)
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(aes(group = interaction(n, delta, func)), linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("FSM_ARG(optimise=T)"="darkblue",
"FSM_ARG(optimise=T, clonal=T)"="darkgreen",
"ClonalOrigin_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange",
"simbac_ARG(optimise_site=T)"="yellow")) +
facet_grid(n ~ delta) +
labs(
title = "Running time for different ARG simulation methods",
x = "rho",
y = "log time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
#| echo: true
time_plot <- time_df
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(, linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("FSM_ARG(optimise=T)"="darkblue",
"FSM_ARG(optimise=T, clonal=T)"="darkgreen",
"ClonalOrigin_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange",
"simbac_ARG(optimise_site=T)"="yellow")) +
facet_grid(n ~ delta) +
labs(
title = "Running time for different ARG simulation methods",
x = "rho",
y = "log time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
#| echo: true
time_plot <- time_df
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(, linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("FSM_ARG(optimise=T)"="darkblue",
"FSM_ARG(optimise=T, clonal=T)"="darkgreen",
"ClonalOrigin_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange",
"simbac_ARG(optimise_site=T)"="yellow")) +
labs(
title = "Running time for different ARG simulation methods",
x = "rho",
y = "log time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
View(time_df)
#| echo: true
time_df <- data.frame(time=rep(NA, 5000),
func=c(rep("FSM_ARG(optimise_recom=T)", 1000),
rep("FSM_ARG(optimise_recom=F)", 1000),
rep("simbac_ARG(optimise_site=F)", 1000),
rep("ClonalOrigin_ARG(optimise_recomb=F)", 1000),
rep("ClonalOrigin_ARG(optimise_recomb=T)", 1000)))
set.seed(10)
for (i in 1:1000) {
r <- simARG::FSM_ARG(100L, 5, 100L, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = TRUE)
time_df$time[i] <- r$sum_time
r <- simARG::FSM_ARG(100L, 5, 100L, bacteria = TRUE, delta = 5,
node_max = 100000, optimise_recomb = FALSE)
time_df$time[1000+i] <- r$sum_time
r <- simARG::simbac_ARG(100L, 5, 100L, 5, node_max = 100000)
time_df$time[2000+i] <- r$sum_time
r <- simARG::ClonalOrigin_ARG(100L, 5, 100L, 5, node_max = 100000)
time_df$time[3000+i] <- r$sum_time
r <- simARG::ClonalOrigin_ARG(100L, 5, 100L, 5, node_max = 100000, optimise_recomb = TRUE)
time_df$time[4000+i] <- r$sum_time
if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}
#| echo: true
ggplot(time_df, aes(x=func, y=time, fill=func)) +
geom_violin(width=1, alpha=0.5) +
geom_boxplot(width=0.1, color="black", alpha=0.2) +
labs(title = "# of leaf lineages = 100, rho = 5",
x = "Functions",
y = "ARG height") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12)
)
rho_values <-  seq(5, 30, by = 5)
func_vec <- c("FSM_ARG(optimise=T)", "FSM_ARG(optimise=T, clonal=T)",
"simbac_ARG(optimise_site=F)", "simbac_ARG(optimise_site=T)",
"ClonalOrigin_ARG(optimise=F)")
time_df <- expand.grid(
t = NA,
rho = rho_values,
func = func_vec
)
set.seed(100)
for (i in 1:nrow(time_df)) {
n <- 20L
rho <- time_df$rho[i]
delta <- 10
func_str <- time_df$func[i]
time_vec <- rep(NA, 10)
if (func_str == "FSM_ARG(optimise=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::FSM_ARG(n, rho, 100L, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "FSM_ARG(optimise=T, clonal=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::FSM_ARG(n, rho, 100L, bacteria = TRUE, delta = delta,
node_max = 100000, optimise_recomb = TRUE, clonal = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=F)") {
for (j in 1:10) {
time_result <- system.time(
simARG::simbac_ARG(n, rho, 100L, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "simbac_ARG(optimise_site=T)") {
for (j in 1:10) {
time_result <- system.time(
simARG::simbac_ARG(n, rho, 100L, delta, node_max = 100000, optimise_site = TRUE)
)
time_vec[j] <- time_result["elapsed"]
}
} else if (func_str == "ClonalOrigin_ARG(optimise=F)") {
if (rho > 15) {next}
for (j in 1:10) {
time_result <- system.time(
simARG::ClonalOrigin_ARG(n, rho, 100L, delta, node_max = 100000)
)
time_vec[j] <- time_result["elapsed"]
}
}
time_df$t[i] <- median(time_vec)
print(paste("Complete", i, "iterations"))
}
time_vec
View(time_df)
time_plot <- time_df
ggplot(time_plot, aes(x=rho, y=t, color=func)) +
geom_line(, linewidth = 1.2, alpha=0.7) +
geom_point(size = 2, shape = 21, fill = "white", stroke = 1.2, alpha=0.7) +
scale_color_manual(values=c("FSM_ARG(optimise=T)"="darkblue",
"FSM_ARG(optimise=T, clonal=T)"="darkgreen",
"ClonalOrigin_ARG(optimise=F)"="darkred",
"simbac_ARG(optimise_site=F)"="orange",
"simbac_ARG(optimise_site=T)"="yellow")) +
labs(
title = "Running time for different ARG simulation methods",
x = "rho",
y = "log time",
color = "function"
) +
scale_y_continuous(trans='log10') +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12),
legend.position = "bottom"
)
#| echo: true
int_matrix <- matrix(1L, nrow=500, ncol=5e6)
bool_matrix <- matrix(T, nrow=500, ncol=5e6)
object.size(int_matrix)
object.size(bool_matrix)
object.size(int_matrix) / (500 * 5e6)
object.size(bool_matrix) / (500 * 5e6)
#| echo: true
int_matrix <- matrix(1L, nrow=500, ncol=5e5)
bool_matrix <- matrix(T, nrow=500, ncol=5e5)
object.size(int_matrix)
object.size(bool_matrix)
object.size(int_matrix) / (500 * 5e5)
object.size(bool_matrix) / (500 * 5e5)
2^10
#| echo: true
num10_matrix <- matrix(2^10, nrow=500, ncol=5e4)
object.size(num10_matrix)
object.size(num10_matrix) / (500 * 5e5)
2L^10
#| echo: true
num10_matrix <- matrix(2L^10, nrow=500, ncol=5e4)
object.size(num10_matrix)
object.size(num10_matrix) / (500 * 5e5)
num10_matrix[1,1]
class(1024)
class(num10_matrix[1,1])
class(2L^10)
class(as.integer(2^10))
class(2L^10L)
#| echo: true
num10_matrix <- matrix(as.integer(2^10), nrow=500, ncol=5e4)
object.size(num10_matrix)
object.size(num10_matrix) / (500 * 5e5)
5e4/2
#| echo: true
num10_matrix <- matrix(as.integer(2^10), nrow=500, ncol=50000)
object.size(num10_matrix)
object.size(num10_matrix) / (500 * 5e5)
#| echo: true
num20_matrix <- matrix(as.integer(2^20), nrow=500, ncol=25000)
object.size(num20_matrix)
object.size(num20_matrix) / (500 * 5e5)
.Machine$integer.max
log2(2147483647)
50000/3
16667*3
#| echo: true
print(log2(.Machine$integer.max))
num30_matrix <- matrix(as.integer(2^30), nrow=500, ncol=16667)
object.size(num30_matrix)
object.size(num30_matrix) / (500 * 5e5)
#| echo: true
print(paste0("Boolean / integer: ", 1e10/(5e6 * 4)), " rows")
#| echo: true
print(paste0("Boolean / integer: ", 1e10/(5e6 * 4), " rows")
1e10/(5e6 * 4)
#| echo: true
print(paste0("Boolean / integer: ", 1e10/(5e6 * 4), " rows"))
#| echo: true
print(paste0("Boolean / integer: ", 5e9/(5e6 * 4), " rows"))
print(paste0("To int every 10 elements: ", 5e9/(5e6 * 0.4), " rows"))
print(paste0("To int every 20 elements: ", 5e9/(5e6 * 0.2), " rows"))
print(paste0("To int every 30 elements: ", 5e9/(5e6 * 0.1), " rows"))
