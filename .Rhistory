ancmat[L + 1, nodes] <- ancmat[L + 1, toCoal[i]] | ancmat[L + 1, toCoal[j]]
# Update lineage list
toCoal[i] <- nodes
toCoal[j] <- toCoal[k]
toCoal[k] <- 0
toCoalAncMat[, j] <- toCoalAncMat[, k]
k <- k - 1
} else {
# Recombination event
i <- sample(1:k, 1)
beg <- which(runif(1) < probstartcum)[1]
b <- which(beg <= blockscum)[1]
nd <- min(beg + rgeom(1, delta), blockscum[b])
# Skip if recombination doesn't affect ancestral material
if (optimise &&
(all(toCoalAncMat[beg:nd, i] == 0) ||
all(toCoalAncMat[-(beg:nd), i] == 0))) next
nodes <- nodes + 2
s[nodes - 1, 1] <- toCoal[i]
s[nodes, 1] <- toCoal[i]
s[toCoal[i], 3:4] <- c(nodes - 1, nodes)
s[nodes, 5:6] <- c(beg, nd)
# Split ancestry
toCoalAncMatSet <- rep(0L, L)
toCoalAncMatSet[beg:nd] <- toCoalAncMat[beg:nd, i]
toCoalAncMat[beg:nd, i] <- 0
toCoalAncMat[, k + 1] <- toCoalAncMatSet
ancmat[1:L, nodes - 1] <- toCoalAncMat[, i]
ancmat[1:L, nodes] <- toCoalAncMatSet
ancmat[L + 1, nodes - 1] <- ancmat[L + 1, toCoal[i]]
toCoal[i] <- nodes - 1
toCoal[k + 1] <- nodes
k <- k + 1
}
}
# Finalize
s <- s[1:nodes, , drop = FALSE]
ages <- ages[1:nodes]
ancmat <- ancmat[, 1:nodes, drop = FALSE]
})
#' bacteria recombination or not,
#' if yes, delta is mean of the length of recombinant segment,
#' initial maximal node size (default = 1000),
#' optimise recombination edges or not
#' Create a full ARG with coalescent and recombination
#' Edge dataframe: root node, leaf node, edge length, edge material interval
#' Node dataframe: node index, node height, node material interval
#' Output: edge dataframe, node dataframe, waiting time for each event,
#' total time, number of lineages at each event time, number of leaf alleles,
#' recombination parameter, bacteria recombination or not, and parameter delta
sim_FSM_ARG2 <- function(n, rho, L, bacteria=FALSE, delta=NULL, node_max=1000, optimise_recomb=FALSE) {
if (n!=as.integer(n)) {
stop("Sample size must be an integer")
} else if (L!=as.integer(L)) {
stop("Number of sites must be an integer")
} else if (bacteria & is.null(delta)) {
stop("Must provide parameter for the length of recombinant segment")
} else if (n >= node_max) {
stop("Maximal node size must greater than the number of leaf lineages")
}
k = n
k_vector <- c(k)
t <- vector("numeric", length = 0) # vector of event times
t_sum <- 0
edge_matrix <- matrix(NA, nrow=node_max, ncol=3) # root and leaf nodes, length
colnames(edge_matrix) <- c("node1", "node2", "length")
edge_mat <- matrix(NA, nrow=node_max, ncol=L)    # edge material
node_height <- rep(NA, node_max)                 # node height to recent time
node_mat <- matrix(NA, nrow=node_max, ncol=L)    # node material
node_height[1:n] <- 0                            # initialize first n nodes
node_mat[1:n, ] <- 1
# Probability of starting recombination at each site
probstart <- rep(1, L)
if (bacteria) {probstart[1] <- delta}
probstart <- probstart / sum(probstart)
probstartcum <- cumsum(probstart)
# Initialize variables and vector
edge_index <- 1
node_index <- n + 1
pool <- as.integer(1:n)
next_node <- as.integer(n+1)
while (k > 1) {
# sample a new event time
event_time <- rexp(1, rate=k*(k-1+rho)/2)
t <- c(t, event_time)
t_sum <- t_sum + event_time
# sample whether the event is a coalescent
p_coale <- rbinom(n=1, size=1, prob=(k-1)/(k-1+rho))
if (p_coale == 1) {
# coalescent event
leaf_node <- sample(pool, size=2, replace=FALSE)
# append edges
edge_matrix[c(edge_index, edge_index+1), 1] <- next_node
edge_matrix[c(edge_index, edge_index+1), 2] <- leaf_node
edge_matrix[c(edge_index, edge_index+1), 3] <- t_sum-node_height[leaf_node]
edge_mat[c(edge_index, edge_index+1), ] <- node_mat[leaf_node, ]
# append root node
node_height[node_index] <- t_sum
node_mat[node_index, ] <- as.integer(node_mat[leaf_node[1], ] |
node_mat[leaf_node[2], ])
# updates for iteration
edge_index <- edge_index + 2
node_index <- node_index + 1
pool <- c(setdiff(pool, leaf_node), next_node)
next_node <- next_node + 1L
k <- k - 1
} else {
# recombination event
leaf_node <- sample(pool, size=1, replace=FALSE)
if (bacteria) {
x <- which(runif(1) < probstartcum)[1]
y <- min(x + rgeom(1, 1/delta), L)
if ((sum(node_mat[leaf_node, x:y])==0 |
sum(node_mat[leaf_node, -(x:y)])==0) & optimise_recomb) {
next
}
edge_mat[c(edge_index, edge_index+1), ] <- 0
edge_mat[edge_index, x:y] <- node_mat[leaf_node, x:y]
edge_mat[edge_index+1, -(x:y)] <- node_mat[leaf_node, -(x:y)]
node_mat[c(node_index, node_index+1), ] <- 0
node_mat[node_index, x:y] <- node_mat[leaf_node, x:y]
node_mat[node_index+1, -(x:y)] <- node_mat[leaf_node, -(x:y)]
} else {
x <- which(runif(1) < probstartcum)[1]
if ((sum(node_mat[leaf_node, 1:(x-1)])==0 |
sum(node_mat[leaf_node, x:L])==0) & optimise_recomb) {
next
}
edge_mat[c(edge_index, edge_index+1), ] <- 0
edge_mat[edge_index, 1:(x-1)] <- node_mat[leaf_node, 1:(x-1)]
edge_mat[edge_index+1, x:L] <- node_mat[leaf_node, x:L]
node_mat[c(node_index, node_index+1), ] <- 0
node_mat[node_index, 1:(x-1)] <- node_mat[leaf_node, 1:(x-1)]
node_mat[node_index+1, x:L] <- node_mat[leaf_node, x:L]
}
# append edges
edge_matrix[c(edge_index, edge_index+1), 1] <- c(next_node, next_node+1L)
edge_matrix[c(edge_index, edge_index+1), 2] <- leaf_node
edge_matrix[c(edge_index, edge_index+1), 3] <- t_sum-node_height[leaf_node]
# append root node
node_height[c(node_index, node_index+1)] <- t_sum
# updates for iteration
edge_index <- edge_index + 2
node_index <- node_index + 2
pool <- c(setdiff(pool, leaf_node), next_node, next_node+1L)
next_node <- next_node + 2L
k <- k + 1
}
k_vector <- c(k_vector, k)
if (max(edge_index, next_node, node_index) >= node_max - 1) {
# add empty rows or elements if more edges than expected
edge_matrix <- rbind(edge_matrix, matrix(NA, nrow=node_max, ncol=3))
edge_mat <- rbind(edge_mat, matrix(NA, nrow=node_max, ncol=L))
node_height <- c(node_height, rep(NA, node_max))
node_mat <- rbind(node_mat, matrix(NA, nrow=node_max, ncol=L))
node_max <- 2 * node_max
}
}
ARG = list(edge=edge_matrix[1:(edge_index-1), ],
edge_mat=edge_mat[1:(edge_index-1), ],
node_height=node_height[1:(node_index-1)],
node_mat=node_mat[1:(node_index-1), ],
waiting_time=t, sum_time=t_sum, k=k_vector, n=n, rho=rho, L=L,
bacteria=bacteria, delta=delta)
class(ARG) <- "sim_FSM_ARG"
return(ARG)
}
set.seed(11)
ARG <- sim_FSM_ARG(5, 1, 10)
ARG <- sim_FSM_ARG2(5, 1, 10)
ARG_matrix <- as.matrix(ARG$edge[, c(1, 2)])
View(ARG_matrix)
View(ARG_matrix)
g <- graph_from_edgelist(ARG_matrix, directed = FALSE)
g <- delete_vertices(g, V(g)[degree(g) == 0])
layout_coord <- ARG_igraph(ARG)
plot.igraph(g)
plot.igraph(g, layout=layout_coord)
source("sim_gene/local_tree.r")
source("sim_gene/localtree_to_phylo.r")
source("sim_gene/ARG_igraph.r")
library(igraph)
g <- graph_from_edgelist(ARG_matrix, directed = FALSE)
g <- delete_vertices(g, V(g)[degree(g) == 0])
layout_coord <- ARG_igraph(ARG)
plot.igraph(g)
plot.igraph(g, layout=layout_coord)
ARG_mutation <- sim_FSM_mutation(ARG, 2)
ARG$edge[, 1]
ARG$edge_mat
ARG$node_mat[ARG$edge[, 1], ]
?hypoexp
??hypoexp
#| label: load-packages
#| include: false
library(ggplot2)
library(microbenchmark)
library(patchwork)
library(sdprisk)
source("sim_gene/FSM/sim_FSM_ARG.r")
source("sim_gene/FSM/sim_FSM_ARG2.r")
source("sim_gene/ref/simu.R")
source("sim_gene/sim_birth_death.r")
source("sim_gene/local_tree.r")
source("sim_gene/localtree_height.r")
source("sim_gene/localtree_traj.r")
#| echo: true
time_df <- data.frame(time=rep(NA, 700),
optimise=c(rep("Simulated Hitting Time", 100),
c(rep("TRUE", 100), rep("FALSE", 100)),
c(rep("TRUE", 100), rep("FALSE", 100)),
c(rep("TRUE", 100), rep("FALSE", 100))),
func=c(rep("Birth-death Process", 100),
rep("sim_FSM_ARG", 200),
rep("sim_FSM_ARG2", 200),
rep("simu", 200)))
for (i in 1:100) {
t <- sim_birth_death(100, 5)
time_df$time[i] <- t
r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1,
node_max = 100000, optimise_recomb = TRUE)
time_df$time[100+i] <- r$sum_time
r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1,
node_max = 100000, optimise_recomb = FALSE)
time_df$time[200+i] <- r$sum_time
r <- sim_FSM_ARG2(100, 5, 100, bacteria = TRUE, delta = 1,
node_max = 100000, optimise_recomb = TRUE)
time_df$time[300+i] <- r$sum_time
r <- sim_FSM_ARG2(100, 5, 100, bacteria = TRUE, delta = 1,
node_max = 100000, optimise_recomb = FALSE)
time_df$time[400+i] <- r$sum_time
r = simu(n=100, rho = 5, delta = 1, blocks = c(100), optimise = T)
time_df$time[500+i] <- tail(r$ages, n=1)
r = simu(n=100, rho = 5, delta = 1, blocks = c(100), optimise = F)
time_df$time[600+i] <- tail(r$ages, n=1)
if (i%%10 == 0) {print(paste("Complete", i, "iterations"))}
}
ggplot(time_df, aes(x=func, y=time, fill=optimise)) +
geom_boxplot() +
labs(title = "# of leaf lineages = 100, rho = 5",
x = "Functions",
y = "ARG height") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12)
)
#| echo: true
height_t_df <- data.frame(s1=rep(NA, 1000),
s50=rep(NA, 1000),
s80=rep(NA, 1000))
set.seed(11)
for (i in 1:1000) {
ARG <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1,
node_max = 100000, optimise_recomb = TRUE)
tree1 <- local_tree(ARG, 1)
tree50 <- local_tree(ARG, 50)
tree80 <- local_tree(ARG, 80)
height_t_df$s1[i] <- tree_height(tree1)
height_t_df$s50[i] <- tree_height(tree50)
height_t_df$s80[i] <- tree_height(tree80)
if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}
n <- 100
height_rate <- n:2 * (n-1):1 / 2
# x <- seq(0, 10, length.out = 500)
# height_density <- dhypoexp(x, rate=height_rate)
height_density <- function(x) {
dhypoexp(x, rate=height_rate)
}
hist1 <- ggplot(height_t_df, aes(x = s1)) +
geom_histogram(aes(y = after_stat(density)),
binwidth = 0.5,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 1",
x = "Height",
y = "Density") +
theme_minimal()
hist2 <- ggplot(height_t_df, aes(x = s50)) +
geom_histogram(aes(y = after_stat(density)),
binwidth = 0.5,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 50",
x = "Height",
y = "Density") +
theme_minimal()
hist3 <- ggplot(height_t_df, aes(x = s80)) +
geom_histogram(aes(y = after_stat(density)),
binwidth = 0.5,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 80",
x = "Height",
y = "Density") +
theme_minimal()
combined_hist <- hist1 + hist2 + hist3
combined_hist <- combined_hist +
plot_annotation(
title = "sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1, node_max = 100000, optimise_recomb = TRUE)")
print(combined_hist)
#| echo: true
height_f_df <- data.frame(s1=rep(NA, 1000),
s50=rep(NA, 1000),
s80=rep(NA, 1000))
set.seed(11)
for (i in 1:1000) {
ARG <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1,
node_max = 100000, optimise_recomb = FALSE)
tree1 <- local_tree(ARG, 1)
tree50 <- local_tree(ARG, 50)
tree80 <- local_tree(ARG, 80)
height_f_df$s1[i] <- tree_height(tree1)
height_f_df$s50[i] <- tree_height(tree50)
height_f_df$s80[i] <- tree_height(tree80)
if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}
hist1 <- ggplot(height_f_df, aes(x = s1)) +
geom_histogram(aes(y = after_stat(density)),
binwidth = 0.5,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 1",
x = "Height",
y = "Density") +
theme_minimal()
hist2 <- ggplot(height_f_df, aes(x = s50)) +
geom_histogram(aes(y = after_stat(density)),
binwidth = 0.5,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 50",
x = "Height",
y = "Density") +
theme_minimal()
hist3 <- ggplot(height_f_df, aes(x = s80)) +
geom_histogram(aes(y = after_stat(density)),
binwidth = 0.5,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 80",
x = "Height",
y = "Density") +
theme_minimal()
combined_hist <- hist1 + hist2 + hist3
combined_hist <- combined_hist +
plot_annotation(
title = "sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1, node_max = 100000, optimise_recomb = FALSE)")
print(combined_hist)
#| echo: true
height_t_df2 <- data.frame(s1=rep(NA, 1000),
s50=rep(NA, 1000),
s80=rep(NA, 1000))
set.seed(11)
for (i in 1:1000) {
ARG <- sim_FSM_ARG2(100, 5, 100, bacteria = TRUE, delta = 1,
node_max = 100000, optimise_recomb = TRUE)
tree1 <- local_tree(ARG, 1)
tree50 <- local_tree(ARG, 50)
tree80 <- local_tree(ARG, 80)
height_t_df2$s1[i] <- tree_height(tree1)
height_t_df2$s50[i] <- tree_height(tree50)
height_t_df2$s80[i] <- tree_height(tree80)
if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}
hist1 <- ggplot(height_t_df2, aes(x = s1)) +
geom_histogram(aes(y = after_stat(density)),
binwidth = 0.5,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 1",
x = "Height",
y = "Density") +
theme_minimal()
hist2 <- ggplot(height_t_df2, aes(x = s50)) +
geom_histogram(aes(y = after_stat(density)),
binwidth = 0.5,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 50",
x = "Height",
y = "Density") +
theme_minimal()
hist3 <- ggplot(height_t_df2, aes(x = s80)) +
geom_histogram(aes(y = after_stat(density)),
binwidth = 0.5,
fill = "lightgreen",
color = "black",
alpha = 0.7) +
stat_function(fun = height_density, # Use your custom function here
color = "darkblue",
linewidth = 1.2,
linetype = "solid") +
labs(title = "Locat tree at site 80",
x = "Height",
y = "Density") +
theme_minimal()
combined_hist <- hist1 + hist2 + hist3
combined_hist <- combined_hist +
plot_annotation(
title = "sim_FSM_ARG2(100, 5, 100, bacteria = TRUE, delta = 1, node_max = 100000, optimise_recomb = TRUE)")
print(combined_hist)
#| echo: true
node_df <- data.frame(n_node=rep(0, 200),
n=c(10*c(1:100), 10*c(1:100)),
optimise=c(c(rep("TRUE", 100), rep("FALSE", 100))))
for (i in 1:100) {
for (j in 1:10) {
r <- sim_FSM_ARG2(node_df$n[i], 5, 100, bacteria = TRUE, delta = 10,
node_max = 100000, optimise_recomb = TRUE)
node_df$n_node[i] <- node_df$n_node[i] + length(r$node_height)
r <- sim_FSM_ARG2(node_df$n[i], 5, 100, bacteria = TRUE, delta = 10,
node_max = 100000, optimise_recomb = FALSE)
node_df$n_node[100+i] <- node_df$n_node[100+i] + length(r$node_height)
}
if (i%%10 == 0) {print(paste("Complete", i, "iterations"))}
}
node_df$n_node <- node_df$n_node/10
ggplot(node_df, aes(x=n, y=n_node, color=optimise)) +
geom_line(size = 1.2) +
geom_point(size = 3, shape = 21, fill = "white", stroke = 1.2) +
scale_color_manual(values=c("TRUE"="darkblue", "FALSE"="darkred")) +
labs(
title = "Number of Nodes from sim_FSM_ARG2()",
x = "# of Leaf Lineages",
y = "# of Nodes",
color = "Optimise"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 16),
legend.text = element_text(size = 12)
)
#| echo: true
benchmark_with_opt2 <- microbenchmark(
sim_FSM_ARG2(100, 5, 100, bacteria = TRUE, delta = 10,
node_max = 100000, optimise_recomb = TRUE),
times = 100,
setup=set.seed(10)
)
benchmark_with_opt1 <- microbenchmark(
sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 10,
node_max = 100000, optimise_recomb = TRUE),
times = 100,
setup=set.seed(10)
)
benchmark_without_opt <- microbenchmark(
sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 10,
node_max = 100000, optimise_recomb = FALSE),
times = 100,
setup=set.seed(10)
)
benchmark_simu <- microbenchmark(
simu(n=100, rho = 5, delta = 10, blocks = c(100), optimise = T),
times = 100,
setup=set.seed(10)
)
summary(benchmark_with_opt2)
summary(benchmark_with_opt1)
summary(benchmark_without_opt)
summary(benchmark_simu)
