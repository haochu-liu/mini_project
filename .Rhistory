# simulations
mu_vec <- runif(100, min=-2, max=2)
s_vec <- c()
for (i in 1:length(mu_vec)) {
s_i <- mean(rnorm(10, mean=mu_vec[i]), sd=1)
s_vec <- c(s_vec, s_i)
}
library(ggplot2)
setwd("C:/Users/u2008181/mini_project")
source("abc_functions/abc_rejection.r")
source("abc_functions/abc_knn.r")
source("abc_functions/abc_mcmc.r")
source("abc_functions/abc_pmc.r")
source("abc_functions/abc_llr.r")
mu <- 0
# observation
s_obs <- mean(rnorm(10, mean=mu, sd=1))
# simulations
mu_vec <- runif(100, min=-2, max=2)
s_vec <- c()
for (i in 1:length(mu_vec)) {
s_i <- mean(rnorm(10, mean=mu_vec[i]), sd=1)
s_vec <- c(s_vec, s_i)
}
# proposal function
p_theta <- function() {
runif(1, min=-2, max=2)
}
d_theta <- function(theta) {
if (theta < 2 & theta > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
library(ggplot2)
setwd("C:/Users/u2008181/mini_project")
source("abc_functions/abc_rejection.r")
source("abc_functions/abc_knn.r")
source("abc_functions/abc_mcmc.r")
source("abc_functions/abc_pmc.r")
source("abc_functions/abc_llr.r")
mu <- 0
# observation
s_obs <- mean(rnorm(10, mean=mu, sd=1))
# simulations
mu_vec <- runif(100, min=-2, max=2)
s_vec <- c()
for (i in 1:length(mu_vec)) {
s_i <- mean(rnorm(10, mean=mu_vec[i]), sd=1)
s_vec <- c(s_vec, s_i)
}
# proposal function
p_theta <- function(theta_0) {
runif(1, min=-2, max=2)
}
d_theta <- function(theta_1, theta_0) {
if (theta_1 < 2 & theta_1 > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# initial theta
mu_0 <- runif(1, min=-2, max=2)
# M-H
matrix_list <- abc_mcmc(c(s_obs), 0.01, gaussian_kernel, p_theta, d_theta, p_s, d_theta, mu_0, 10000)
# hist of posterior
hist(matrix_list$theta_matrix[5000:10001, ], probability = TRUE, main = "Histogram of mu|s_obs",
breaks = 20, col = "gray", border = "black", xlab="mu")
abline(v = s_obs, col = "red", lwd = 2, lty = 2)
# proposal function
p_theta <- function() {
runif(1, min=-2, max=2)
}
d_theta <- function(theta) {
if (theta < 2 & theta > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
library(ggplot2)
setwd("C:/Users/u2008181/mini_project")
source("abc_functions/abc_rejection.r")
source("abc_functions/abc_knn.r")
source("abc_functions/abc_mcmc.r")
source("abc_functions/abc_pmc.r")
source("abc_functions/abc_llr.r")
mu <- 0
# observation
s_obs <- mean(rnorm(10, mean=mu, sd=1))
# simulations
mu_vec <- runif(100, min=-2, max=2)
s_vec <- c()
for (i in 1:length(mu_vec)) {
s_i <- mean(rnorm(10, mean=mu_vec[i]), sd=1)
s_vec <- c(s_vec, s_i)
}
# proposal function
p_theta <- function() {
runif(1, min=-2, max=2)
}
d_theta <- function(theta) {
if (theta < 2 & theta > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
library(ggplot2)
setwd("C:/Users/u2008181/mini_project")
source("abc_functions/abc_rejection.r")
source("abc_functions/abc_knn.r")
source("abc_functions/abc_mcmc.r")
source("abc_functions/abc_pmc.r")
source("abc_functions/abc_llr.r")
# proposal function
p_theta <- function() {
runif(1, min=-2, max=2)
}
d_theta <- function(theta) {
if (theta < 2 & theta > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
(xy <- cbind(x = 1:10, y = c(1:3, 8:5, 8:10)))
w1 <- c(0,0,0,1,1,1,1,1,0,0)
cov.wt(xy, wt = w1)
cov.wt(xy, wt = w1)$cov
cov.wt(xy, wt = w1)$cov * 2
as.matrix(cov.wt(xy, wt = w1)$cov)
library(ggplot2)
setwd("C:/Users/u2008181/mini_project")
source("abc_functions/abc_rejection.r")
source("abc_functions/abc_knn.r")
source("abc_functions/abc_mcmc.r")
source("abc_functions/abc_pmc.r")
source("abc_functions/abc_llr.r")
# proposal function
p_theta <- function() {
runif(1, min=-2, max=2)
}
d_theta <- function(theta) {
if (theta < 2 & theta > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE, main = "Histogram of mu|s_obs",
breaks = 20, col = "gray", border = "black", xlab="mu")
abline(v = s_obs, col = "red", lwd = 2, lty = 2)
library(ggplot2)
setwd("C:/Users/u2008181/mini_project")
source("abc_functions/abc_rejection.r")
source("abc_functions/abc_knn.r")
source("abc_functions/abc_mcmc.r")
source("abc_functions/abc_pmc.r")
source("abc_functions/abc_llr.r")
# proposal function
p_theta <- function() {
runif(1, min=-2, max=2)
}
d_theta <- function(theta) {
if (theta < 2 & theta > -2) {return(log(1/4))}
return(log(0))
}
# model sample
p_s <- function(theta) {
mean(rnorm(10, mean=theta), sd=1)
}
# list of tolerance
tol <- c(10, 2, 1.5, 1, 0.5)
matrix_list <- abc_pmc(c(s_obs), tol, gaussian_kernel, p_theta, d_theta, p_s, 1000)
# hist of posterior
hist(matrix_list$theta_matrix, probability = TRUE, main = "Histogram of mu|s_obs",
breaks = 20, col = "gray", border = "black", xlab="mu")
abline(v = s_obs, col = "red", lwd = 2, lty = 2)
#| label: load-packages
#| include: false
library(ivs)
library(tibble)
library(dplyr)
library(igraph)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
source("sim_gene/sim_ARG.r")
set.seed(10)
tree <- sim_ARG(5, 1)
tree_matrix <- as.matrix(tree$edge[, c(1, 2)])
g <- graph_from_edgelist(tree_matrix, directed = FALSE)
g <- delete_vertices(g, V(g)[degree(g) == 0])
plot(g)
library(ape)
set.seed(10)
tree <- sim_ARG(5, 1)
tree_matrix <- as.matrix(tree$edge[, c(1, 2)])
g <- graph_from_edgelist(tree_matrix, directed = FALSE)
g <- delete_vertices(g, V(g)[degree(g) == 0])
plot(g)
#| label: load-packages
#| include: false
library(ivs)
library(tibble)
library(dplyr)
library(igraph)
library(ggplot2)
library(purrr)
library(deSolve)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
source("sim_gene/sim_ARG.r")
set.seed(10)
tree <- sim_ARG(5, 1)
tree_matrix <- as.matrix(tree$edge[, c(1, 2)])
g <- graph_from_edgelist(tree_matrix, directed = FALSE)
g <- delete_vertices(g, V(g)[degree(g) == 0])
plot(g)
#| include: false
n_trees <- 10
n <- 20
rho <- 1
tree_list <- map(1:n_trees, function(i) {
tree <- sim_ARG(n, rho)
x_values <- cumsum(c(0, tree$waiting_time))
y_values <- tree$k
tibble(
x = x_values,
y = y_values,
id = paste0("ARG_", i) # Identifier for each step function
)
})
step_df <- bind_rows(tree_list)
ODE_process <- function(x, state, parameters) {
with(as.list(c(state, parameters)), {
# ODE: dy/dx = (rho * y - y^2 + y) / 2
dy_dx <- (rho * y - y^2 + y) / 2
return(list(c(dy_dx)))
})
}
initial_y <- c(y = n)
x_values <- seq(0, 2*max(step_df$x), by = 0.1)
ode_parameters <- c(rho = rho)
ode_solution <- ode(
y = initial_y,
times = x_values,
func = ODE_process,
parms = ode_parameters
)
ode_df <- as_tibble(ode_solution)
colnames(ode_df)[1] <- "x"
ggplot() +
# 10 step functions
geom_step(data = step_df, aes(x = x, y = y, group = id, color = id),
size = 0.7, alpha = 0.7) +
# one continuous function
geom_line(data = ode_df, aes(x = x, y = y), color = "black",
linetype = "solid", size = 1.2) +
labs(
title = "Birth and Death Process",
x = "Time",
y = "Number of alleles",
color = "ARG ID"
) +
theme_minimal() +
guides(color = guide_legend(ncol = 2))
#| echo: false
n_trees <- 10
n <- 20
rho <- 1
tree_list <- map(1:n_trees, function(i) {
tree <- sim_ARG(n, rho)
x_values <- cumsum(c(0, tree$waiting_time))
y_values <- tree$k
tibble(
x = x_values,
y = y_values,
id = paste0("ARG_", i) # Identifier for each step function
)
})
step_df <- bind_rows(tree_list)
ODE_process <- function(x, state, parameters) {
with(as.list(c(state, parameters)), {
# ODE: dy/dx = (rho * y - y^2 + y) / 2
dy_dx <- (rho * y - y^2 + y) / 2
return(list(c(dy_dx)))
})
}
initial_y <- c(y = n)
x_values <- seq(0, 2*max(step_df$x), by = 0.1)
ode_parameters <- c(rho = rho)
ode_solution <- ode(
y = initial_y,
times = x_values,
func = ODE_process,
parms = ode_parameters
)
ode_df <- as_tibble(ode_solution)
colnames(ode_df)[1] <- "x"
ggplot() +
# 10 step functions
geom_step(data = step_df, aes(x = x, y = y, group = id, color = id),
size = 0.7, alpha = 0.7) +
# one continuous function
geom_line(data = ode_df, aes(x = x, y = y), color = "black",
linetype = "solid", size = 1.2) +
labs(
title = "Birth and Death Process",
x = "Time",
y = "Number of alleles",
color = "ARG ID"
) +
theme_minimal() +
guides(color = guide_legend(ncol = 2))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
source("sim_gene/sim_mutation.r")
tree_mutation <- sim_mutation(tree, 2)
tree_mutation$node
View(tree_mutation)
tree_mutation$mutation
tree_mutation$node$gene
View(tree_mutation)
tree_mutation$edge
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
source("sim_gene/sim_mutation.r")
tree_mutation <- sim_mutation(tree, 2)
tree_mutation$node
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
local_tree <- local_ARG(tree, 0.5)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
source("sim_gene/local_ARG.r")
local_tree <- local_ARG(tree, 0.5)
local_tree_matrix <- as.matrix(local_tree$edge[, c(1, 2)])
local_g <- graph_from_edgelist(local_tree_matrix, directed = FALSE)
local_g <- delete_vertices(local_g, V(local_g)[degree(local_g) == 0])
plot(local_g)
library(ape)
ape::plot.phylo
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
library(ape)
source("sim_gene/localARG_to_phylo.r")
phylo_tree <- localARG_to_phylo(local_tree)
plot(phylo_tree)
library(ivs)
library(tibble)
library(dplyr)
library(igraph)
library(ggplot2)
library(purrr)
library(deSolve)
source("sim_gene/sim_ARG.r")
source("sim_gene/sim_mutation.r")
source("sim_gene/local_ARG.r")
source("sim_gene/localARG_to_phylo.r")
library(profvis)
profvis(sim_ARG(1000, 1))
profvis(sim_ARG(100, 5))
iv(0, 1)
tree_mutation <- sim_mutation(tree, 2)
tree <- sim_ARG(5, 1)
tree_matrix <- as.matrix(tree$edge[, c(1, 2)])
g <- graph_from_edgelist(tree_matrix, directed = FALSE)
g <- delete_vertices(g, V(g)[degree(g) == 0])
plot(g)
tree_mutation <- sim_mutation(tree, 2)
local_tree1 <- local_ARG(tree_mutation, 0.1)
local_tree1_matrix <- as.matrix(local_tree1$edge[, c(1, 2)])
local_g1 <- graph_from_edgelist(local_tree1_matrix, directed = FALSE)
local_g1 <- delete_vertices(local_g1, V(local_g1)[degree(local_g1) == 0])
plot(local_g1)
library(ape)
phylo_tree1 <- localARG_to_phylo(local_tree1, label=TRUE)
plot(phylo_tree1)
library(ivs)
library(tibble)
library(dplyr)
library(igraph)
library(ggplot2)
library(purrr)
library(deSolve)
source("sim_gene/sim_ARG.r")
source("sim_gene/sim_mutation.r")
source("sim_gene/local_ARG.r")
source("sim_gene/localARG_to_phylo.r")
set.seed(11)
tree <- sim_ARG(5, 1)
tree_matrix <- as.matrix(tree$edge[, c(1, 2)])
g <- graph_from_edgelist(tree_matrix, directed = FALSE)
g <- delete_vertices(g, V(g)[degree(g) == 0])
plot(g)
?graph_from_edgelist
plot.igraph(g)
?plot.igraph
plot.igraph(g, layout=layout_as_tree)
plot.igraph(g, layout=layout_on_grid)
plot.igraph(g, layout=layout_as_tree)
plot.igraph(g, layout=layout_as_tree)
library(igraph)
source("sim_gene/FSM/sim_FSM_ARG.r")
source("sim_gene/FSM/sim_FSM_mutation.r")
source("sim_gene/local_tree.r")
source("sim_gene/localtree_to_phylo.r")
source("sim_gene/ARG_igraph.r")
set.seed(11)
ARG <- sim_FSM_ARG(5, 1, 10)
ARG_matrix <- as.matrix(ARG$edge[, c(1, 2)])
g <- graph_from_edgelist(ARG_matrix, directed = FALSE)
g <- delete_vertices(g, V(g)[degree(g) == 0])
layout_coord <- ARG_igraph(ARG)
plot.igraph(g)
plot.igraph(g, layout=layout_coord)
ARG_mutation <- sim_FSM_mutation(ARG, 2)
local_tree1 <- local_tree(ARG_mutation, 2)
local_tree1_matrix <- as.matrix(local_tree1$edge[, c(1, 2)])
local_g1 <- graph_from_edgelist(local_tree1_matrix, directed = FALSE)
local_g1 <- delete_vertices(local_g1, V(local_g1)[degree(local_g1) == 0])
plot(local_g1)
local_tree2 <- local_tree(ARG_mutation, 9)
local_tree2_matrix <- as.matrix(local_tree2$edge[, c(1, 2)])
local_g2 <- graph_from_edgelist(local_tree2_matrix, directed = FALSE)
local_g2 <- delete_vertices(local_g2, V(local_g2)[degree(local_g2) == 0])
plot(local_g2)
library(ape)
phylo_tree1 <- localtree_to_phylo(local_tree1, label=TRUE)
plot(phylo_tree1)
phylo_tree2 <- localtree_to_phylo(local_tree2, label=TRUE)
plot(phylo_tree2)
letters[1:3]
#| label: load-packages
#| include: false
library(igraph)
source("sim_gene/FSM/sim_FSM_ARG.r")
#| label: load-packages
#| include: false
library(igraph)
source("../sim_gene/FSM/sim_FSM_ARG.r")
source("../sim_gene/FSM/sim_FSM_mutation.r")
source("../sim_gene/local_tree.r")
source("../sim_gene/localtree_to_phylo.r")
source("../sim_gene/ARG_igraph.r")
#| echo: true
df <- data.frame(A = 1:3, B = letters[1:3])
tracemem(df)
df <- rbind(df, data.frame(A = 4, B = "d"))
print(df)
#| echo: true
library(tibble)
library(dplyr)
df <- tibble(A = 1:3, B = letters[1:3])
tracemem(df)
df <- bind_rows(df, tibble(A = 4, B = "d"))
tracemem(df)
print(df)
?tracemem
#| echo: true
df <- data.frame(A = 1:3, B = letters[1:3])
tracemem(df)
df <- rbind(df, data.frame(A = 4, B = "d"))
untracemem(df)
#| echo: true
df <- data.frame(A = 1:3, B = letters[1:3])
tracemem(df)
df <- rbind(df, data.frame(A = 4, B = "d"))
tracemem(df)
untracemem(df)
#| echo: true
df1 <- data.frame(A = 1:3, B = letters[1:3])
df2 <- data.frame(A = 4, B = "d")
tracemem(df1)
tracemem(df2)
df <- rbind(df1, df2)
untracemem(df1)
untracemem(df2)
View(df2)
reticulate::repl_python()
