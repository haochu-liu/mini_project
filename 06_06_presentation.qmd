---
title: "Optimise Function for ARG"
author: "Haochu"
format: html
editor: visual
---

```{r}
#| label: load-packages
#| include: false

library(ggplot2)
library(microbenchmark)
library(patchwork)
library(sdprisk)
source("sim_gene/FSM/sim_FSM_ARG.r")
source("sim_gene/FSM/sim_FSM_ARG2.r")
source("sim_gene/ref/simu.R")
source("sim_gene/sim_birth_death.r")
source("sim_gene/local_tree.r")
source("sim_gene/localtree_height.r")
source("sim_gene/localtree_traj.r")
```

## Compare Simulation Functions

### ARG Height

Compare heights of simulated ARGs from `simu`, `sim_FSM_ARG`, `sim_FSM_ARG2` with and without optimising the recombination of no ancestral material. The green box represents the hitting time from a birth-death process.

```{r}
#| echo: true
time_df <- data.frame(time=rep(NA, 7000),
                      optimise=c(rep("Simulated Hitting Time", 1000),
                                 c(rep("TRUE", 1000), rep("FALSE", 1000)),
                                 c(rep("TRUE", 1000), rep("FALSE", 1000)),
                                 c(rep("TRUE", 1000), rep("FALSE", 1000))),
                      func=c(rep("Birth-death Process", 1000),
                             rep("sim_FSM_ARG", 2000),
                             rep("sim_FSM_ARG2", 2000),
                             rep("simu", 2000)))

set.seed(10)
for (i in 1:1000) {
  t <- sim_birth_death(100, 5)
  time_df$time[i] <- t

  r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1,
                   node_max = 100000, optimise_recomb = TRUE)
  time_df$time[1000+i] <- r$sum_time

  r <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1,
                   node_max = 100000, optimise_recomb = FALSE)
  time_df$time[2000+i] <- r$sum_time

  r <- sim_FSM_ARG2(100, 5, 100, bacteria = TRUE, delta = 1,
                   node_max = 100000, optimise_recomb = TRUE)
  time_df$time[3000+i] <- r$sum_time

  r <- sim_FSM_ARG2(100, 5, 100, bacteria = TRUE, delta = 1,
                   node_max = 100000, optimise_recomb = FALSE)
  time_df$time[4000+i] <- r$sum_time

  r = simu(n=100, rho = 5, delta = 1, blocks = c(100), optimise = T)
  time_df$time[5000+i] <- tail(r$ages, n=1)

  r = simu(n=100, rho = 5, delta = 1, blocks = c(100), optimise = F)
  time_df$time[6000+i] <- tail(r$ages, n=1)

  if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}

ggplot(time_df, aes(x=func, y=time, fill=optimise)) +
  geom_boxplot() +
  labs(title = "# of leaf lineages = 100, rho = 5",
       x = "Functions",
       y = "ARG height") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    axis.title.x = element_text(size = 16),
    axis.text.x = element_text(size = 12),
    axis.title.y = element_text(size = 16),
    axis.text.y = element_text(size = 12),
    legend.title = element_text(size = 16),
    legend.text = element_text(size = 12)
  )
```

### Local Tree Height

Examine the heights of local trees with the hypo-exponential distribution which is expected to be the distribution of heights of trees without recombination.

#### `sim_FSM_ARG`

Set `optimise_recomb = TRUE` gives

```{r}
#| echo: true
height_t_df <- data.frame(s1=rep(NA, 1000),
                          s50=rep(NA, 1000),
                          s80=rep(NA, 1000))
set.seed(11)
for (i in 1:1000) {
  ARG <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1,
                     node_max = 100000, optimise_recomb = TRUE)
  tree1 <- local_tree(ARG, 1)
  tree50 <- local_tree(ARG, 50)
  tree80 <- local_tree(ARG, 80)
  height_t_df$s1[i] <- tree_height(tree1)
  height_t_df$s50[i] <- tree_height(tree50)
  height_t_df$s80[i] <- tree_height(tree80)
  if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}

n <- 100
height_rate <- n:2 * (n-1):1 / 2
# x <- seq(0, 10, length.out = 500)
# height_density <- dhypoexp(x, rate=height_rate)
height_density <- function(x) {
  dhypoexp(x, rate=height_rate)
}

hist1 <- ggplot(height_t_df, aes(x = s1)) +
  geom_histogram(aes(y = after_stat(density)),
                 binwidth = 0.5,
                 fill = "lightgreen",
                 color = "black",
                 alpha = 0.7) +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 1",
       x = "Height",
       y = "Density") +
  theme_minimal()
hist2 <- ggplot(height_t_df, aes(x = s50)) +
  geom_histogram(aes(y = after_stat(density)),
                 binwidth = 0.5,
                 fill = "lightgreen",
                 color = "black",
                 alpha = 0.7) +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 50",
       x = "Height",
       y = "Density") +
  theme_minimal()
hist3 <- ggplot(height_t_df, aes(x = s80)) +
  geom_histogram(aes(y = after_stat(density)),
                 binwidth = 0.5,
                 fill = "lightgreen",
                 color = "black",
                 alpha = 0.7) +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 80",
       x = "Height",
       y = "Density") +
  theme_minimal()
combined_hist <- hist1 + hist2 + hist3
combined_hist <- combined_hist +
  plot_annotation(
    title = "sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1, node_max = 100000, optimise_recomb = TRUE)")
print(combined_hist)
```

Set `optimise_recomb = FALSE` gives

```{r}
#| echo: true
height_f_df <- data.frame(s1=rep(NA, 1000),
                          s50=rep(NA, 1000),
                          s80=rep(NA, 1000))
set.seed(11)
for (i in 1:1000) {
  ARG <- sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1,
                     node_max = 100000, optimise_recomb = FALSE)
  tree1 <- local_tree(ARG, 1)
  tree50 <- local_tree(ARG, 50)
  tree80 <- local_tree(ARG, 80)
  height_f_df$s1[i] <- tree_height(tree1)
  height_f_df$s50[i] <- tree_height(tree50)
  height_f_df$s80[i] <- tree_height(tree80)
  if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}

hist1 <- ggplot(height_f_df, aes(x = s1)) +
  geom_histogram(aes(y = after_stat(density)),
                 binwidth = 0.5,
                 fill = "lightgreen",
                 color = "black",
                 alpha = 0.7) +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 1",
       x = "Height",
       y = "Density") +
  theme_minimal()
hist2 <- ggplot(height_f_df, aes(x = s50)) +
  geom_histogram(aes(y = after_stat(density)),
                 binwidth = 0.5,
                 fill = "lightgreen",
                 color = "black",
                 alpha = 0.7) +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 50",
       x = "Height",
       y = "Density") +
  theme_minimal()
hist3 <- ggplot(height_f_df, aes(x = s80)) +
  geom_histogram(aes(y = after_stat(density)),
                 binwidth = 0.5,
                 fill = "lightgreen",
                 color = "black",
                 alpha = 0.7) +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 80",
       x = "Height",
       y = "Density") +
  theme_minimal()
combined_hist <- hist1 + hist2 + hist3
combined_hist <- combined_hist +
  plot_annotation(
    title = "sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 1, node_max = 100000, optimise_recomb = FALSE)")
print(combined_hist)
```

#### `sim_FSM_ARG2`

Set `optimise_recomb = TRUE` gives

```{r}
#| echo: true
height_t_df2 <- data.frame(s1=rep(NA, 1000),
                          s50=rep(NA, 1000),
                          s80=rep(NA, 1000))
set.seed(11)
for (i in 1:1000) {
  ARG <- sim_FSM_ARG2(100, 5, 100, bacteria = TRUE, delta = 1,
                     node_max = 100000, optimise_recomb = TRUE)
  tree1 <- local_tree(ARG, 1)
  tree50 <- local_tree(ARG, 50)
  tree80 <- local_tree(ARG, 80)
  height_t_df2$s1[i] <- tree_height(tree1)
  height_t_df2$s50[i] <- tree_height(tree50)
  height_t_df2$s80[i] <- tree_height(tree80)
  if (i%%100 == 0) {print(paste("Complete", i, "iterations"))}
}

hist1 <- ggplot(height_t_df2, aes(x = s1)) +
  geom_histogram(aes(y = after_stat(density)),
                 binwidth = 0.5,
                 fill = "lightgreen",
                 color = "black",
                 alpha = 0.7) +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 1",
       x = "Height",
       y = "Density") +
  theme_minimal()
hist2 <- ggplot(height_t_df2, aes(x = s50)) +
  geom_histogram(aes(y = after_stat(density)),
                 binwidth = 0.5,
                 fill = "lightgreen",
                 color = "black",
                 alpha = 0.7) +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 50",
       x = "Height",
       y = "Density") +
  theme_minimal()
hist3 <- ggplot(height_t_df2, aes(x = s80)) +
  geom_histogram(aes(y = after_stat(density)),
                 binwidth = 0.5,
                 fill = "lightgreen",
                 color = "black",
                 alpha = 0.7) +
  stat_function(fun = height_density, # Use your custom function here
                color = "darkblue",
                linewidth = 1.2,
                linetype = "solid") +
  labs(title = "Locat tree at site 80",
       x = "Height",
       y = "Density") +
  theme_minimal()
combined_hist <- hist1 + hist2 + hist3
combined_hist <- combined_hist +
  plot_annotation(
    title = "sim_FSM_ARG2(100, 5, 100, bacteria = TRUE, delta = 1, node_max = 100000, optimise_recomb = TRUE)")
print(combined_hist)
```

### Number of Nodes in ARGs

We compare the number of nodes from ARGs simulated by `sim_FSM_ARG2` with and without optimisation of recombination.

```{r}
#| echo: true
node_df <- data.frame(n_node=rep(0, 200),
                      n=c(10*c(1:100), 10*c(1:100)),
                      optimise=c(c(rep("TRUE", 100), rep("FALSE", 100))))

for (i in 1:100) {
  for (j in 1:10) {
    r <- sim_FSM_ARG2(node_df$n[i], 5, 100, bacteria = TRUE, delta = 10,
                     node_max = 100000, optimise_recomb = TRUE)
    node_df$n_node[i] <- node_df$n_node[i] + length(r$node_height)

    r <- sim_FSM_ARG2(node_df$n[i], 5, 100, bacteria = TRUE, delta = 10,
                     node_max = 100000, optimise_recomb = FALSE)
    node_df$n_node[100+i] <- node_df$n_node[100+i] + length(r$node_height)
  }
  if (i%%10 == 0) {print(paste("Complete", i, "iterations"))}
}
node_df$n_node <- node_df$n_node/10

ggplot(node_df, aes(x=n, y=n_node, color=optimise)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 3, shape = 21, fill = "white", stroke = 1.2) +
  scale_color_manual(values=c("TRUE"="darkblue", "FALSE"="darkred")) +
  labs(
    title = "Number of Nodes from sim_FSM_ARG2()",
    x = "# of Leaf Lineages",
    y = "# of Nodes",
    color = "Optimise"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    axis.title.x = element_text(size = 16),
    axis.text.x = element_text(size = 12),
    axis.title.y = element_text(size = 16),
    axis.text.y = element_text(size = 12),
    legend.title = element_text(size = 16),
    legend.text = element_text(size = 12)
  )
```

### Running Time

Compare the running time from `sim_FSM_ARG2(..., optimise_recomb = TRUE)`, `sim_FSM_ARG(..., optimise_recomb = TRUE)`, `sim_FSM_ARG(..., optimise_recomb = FALSE)`, and `simu(..., optimise = T)`.

```{r}
#| echo: true
benchmark_with_opt2 <- microbenchmark(
  sim_FSM_ARG2(100, 5, 100, bacteria = TRUE, delta = 10,
              node_max = 100000, optimise_recomb = TRUE),
  times = 100,
  setup=set.seed(10)
)

benchmark_with_opt1 <- microbenchmark(
  sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 10,
              node_max = 100000, optimise_recomb = TRUE),
  times = 100,
  setup=set.seed(10)
)

benchmark_without_opt <- microbenchmark(
  sim_FSM_ARG(100, 5, 100, bacteria = TRUE, delta = 10,
              node_max = 100000, optimise_recomb = FALSE),
  times = 100,
  setup=set.seed(10)
)

benchmark_simu <- microbenchmark(
  simu(n=100, rho = 5, delta = 10, blocks = c(100), optimise = T),
  times = 100,
  setup=set.seed(10)
)

summary(benchmark_with_opt2)
summary(benchmark_with_opt1)
summary(benchmark_without_opt)
summary(benchmark_simu)
```
